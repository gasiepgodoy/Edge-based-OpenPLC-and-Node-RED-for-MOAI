TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK


FUNCTION_BLOCK DAQ_AI_I
  VAR_INPUT
    DAQ_AI_I_ENABLE : BOOL;
    DAQ_AI_I_STACK : INT;
    DAQ_AI_I_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_AI_I_ANSWER : REAL;
  END_VAR
  VAR_EXTERNAL
    DAQ_AI_I_ENABLE_PSM : BOOL;
    DAQ_AI_I_STACK_PSM : INT;
    DAQ_AI_I_CHANNEL_PSM : INT;
    DAQ_AI_I_PSM : INT;
  END_VAR
  VAR
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV11_ENO : BOOL;
    _TMP_DIV11_OUT : REAL;
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
  END_VAR

  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_AI_I_ENABLE, IN := DAQ_AI_I_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV11_OUT := DIV(EN := DAQ_AI_I_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV11_ENO);
  IF _TMP_DIV11_ENO THEN
      DAQ_AI_I_ANSWER := _TMP_DIV11_OUT;
  END_IF;
  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AI_I_ENABLE, IN := DAQ_AI_I_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AI_I_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AI_I_ENABLE, IN := DAQ_AI_I_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AI_I_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  DAQ_AI_I_ENABLE_PSM := DAQ_AI_I_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AI_U
  VAR_INPUT
    DAQ_AI_U_ENABLE : BOOL;
    DAQ_AI_U_STACK : INT;
    DAQ_AI_U_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_AI_U_ANSWER : REAL;
  END_VAR
  VAR
    DAQ_AI_U_ENABLE_PSM : BOOL;
    DAQ_AI_U_STACK_PSM : INT;
    DAQ_AI_U_CHANNEL_PSM : INT;
    DAQ_AI_U_PSM : INT;
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV11_ENO : BOOL;
    _TMP_DIV11_OUT : REAL;
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
  END_VAR

  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_AI_U_ENABLE, IN := DAQ_AI_U_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV11_OUT := DIV(EN := DAQ_AI_U_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV11_ENO);
  IF _TMP_DIV11_ENO THEN
      DAQ_AI_U_ANSWER := _TMP_DIV11_OUT;
  END_IF;
  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AI_U_ENABLE, IN := DAQ_AI_U_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AI_U_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AI_U_ENABLE, IN := DAQ_AI_U_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AI_U_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  DAQ_AI_U_ENABLE_PSM := DAQ_AI_U_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_DI_OPTO
  VAR_INPUT
    DAQ_DI_OPTO_ENABLE : BOOL;
    DAQ_DI_OPTO_STACK : INT;
    DAQ_DI_OPTO_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_DI_OPTO_ANSWER : REAL;
  END_VAR
  VAR_EXTERNAL
    DAQ_DI_OPTO_ENABLE_PSM : BOOL;
    DAQ_DI_OPTO_STACK_PSM : INT;
    DAQ_DI_OPTO_CHANNEL_PSM : INT;
    DAQ_DI_OPTO_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV19_ENO : BOOL;
    _TMP_DIV19_OUT : REAL;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_DI_OPTO_ENABLE, IN := DAQ_DI_OPTO_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_DI_OPTO_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_DI_OPTO_ENABLE, IN := DAQ_DI_OPTO_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_DI_OPTO_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_DI_OPTO_ENABLE, IN := DAQ_DI_OPTO_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV19_OUT := DIV(EN := DAQ_DI_OPTO_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV19_ENO);
  IF _TMP_DIV19_ENO THEN
      DAQ_DI_OPTO_ANSWER := _TMP_DIV19_OUT;
  END_IF;
  DAQ_DI_OPTO_ENABLE_PSM := DAQ_DI_OPTO_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_I_RD
  VAR_INPUT
    DAQ_AO_I_RD_ENABLE : BOOL;
    DAQ_AO_I_RD_STACK : INT;
    DAQ_AO_I_RD_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_AO_I_RD_ANSWER : REAL;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_I_RD_ENABLE_PSM : BOOL;
    DAQ_AO_I_RD_STACK_PSM : INT;
    DAQ_AO_I_RD_CHANNEL_PSM : INT;
    DAQ_AO_I_RD_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV19_ENO : BOOL;
    _TMP_DIV19_OUT : REAL;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_I_RD_ENABLE, IN := DAQ_AO_I_RD_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_I_RD_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_I_RD_ENABLE, IN := DAQ_AO_I_RD_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_I_RD_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_AO_I_RD_ENABLE, IN := DAQ_AO_I_RD_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV19_OUT := DIV(EN := DAQ_AO_I_RD_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV19_ENO);
  IF _TMP_DIV19_ENO THEN
      DAQ_AO_I_RD_ANSWER := _TMP_DIV19_OUT;
  END_IF;
  DAQ_AO_I_RD_ENABLE_PSM := DAQ_AO_I_RD_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_U_RD
  VAR_INPUT
    DAQ_AO_U_RD_ENABLE : BOOL;
    DAQ_AO_U_RD_STACK : INT;
    DAQ_AO_U_RD_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_AO_U_RD_ANSWER : REAL;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_U_RD_ENABLE_PSM : BOOL;
    DAQ_AO_U_RD_STACK_PSM : INT;
    DAQ_AO_U_RD_CHANNEL_PSM : INT;
    DAQ_AO_U_RD_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV19_ENO : BOOL;
    _TMP_DIV19_OUT : REAL;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_U_RD_ENABLE, IN := DAQ_AO_U_RD_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_U_RD_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_U_RD_ENABLE, IN := DAQ_AO_U_RD_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_U_RD_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_AO_U_RD_ENABLE, IN := DAQ_AO_U_RD_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV19_OUT := DIV(EN := DAQ_AO_U_RD_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV19_ENO);
  IF _TMP_DIV19_ENO THEN
      DAQ_AO_U_RD_ANSWER := _TMP_DIV19_OUT;
  END_IF;
  DAQ_AO_U_RD_ENABLE_PSM := DAQ_AO_U_RD_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_OD_RD
  VAR_INPUT
    DAQ_AO_OD_RD_ENABLE : BOOL;
    DAQ_AO_OD_RD_STACK : INT;
    DAQ_AO_OD_RD_CHANNEL : INT;
  END_VAR
  VAR_OUTPUT
    DAQ_AO_OD_RD_ANSWER : REAL;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_OD_RD_ENABLE_PSM : BOOL;
    DAQ_AO_OD_RD_STACK_PSM : INT;
    DAQ_AO_OD_RD_CHANNEL_PSM : INT;
    DAQ_AO_OD_RD_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_INT_TO_REAL12_ENO : BOOL;
    _TMP_INT_TO_REAL12_OUT : REAL;
    _TMP_DIV19_ENO : BOOL;
    _TMP_DIV19_OUT : REAL;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_OD_RD_ENABLE, IN := DAQ_AO_OD_RD_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_OD_RD_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_OD_RD_ENABLE, IN := DAQ_AO_OD_RD_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_OD_RD_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_INT_TO_REAL12_OUT := INT_TO_REAL(EN := DAQ_AO_OD_RD_ENABLE, IN := DAQ_AO_OD_RD_PSM, ENO => _TMP_INT_TO_REAL12_ENO);
  _TMP_DIV19_OUT := DIV(EN := DAQ_AO_OD_RD_ENABLE, IN1 := _TMP_INT_TO_REAL12_OUT, IN2 := 100.0, ENO => _TMP_DIV19_ENO);
  IF _TMP_DIV19_ENO THEN
      DAQ_AO_OD_RD_ANSWER := _TMP_DIV19_OUT;
  END_IF;
  DAQ_AO_OD_RD_ENABLE_PSM := DAQ_AO_OD_RD_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_U_WT
  VAR_INPUT
    DAQ_AO_U_WT_ENABLE : BOOL;
    DAQ_AO_U_WT_STACK : INT;
    DAQ_AO_U_WT_CHANNEL : INT;
    DAQ_AO_U_WT_VALUE : INT;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_U_WT_ENABLE_PSM : BOOL;
    DAQ_AO_U_WT_STACK_PSM : INT;
    DAQ_AO_U_WT_CHANNEL_PSM : INT;
    DAQ_AO_U_WT_VALUE_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_MOVE12_ENO : BOOL;
    _TMP_MOVE12_OUT : INT;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_U_WT_ENABLE, IN := DAQ_AO_U_WT_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_U_WT_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_U_WT_ENABLE, IN := DAQ_AO_U_WT_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_U_WT_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_MOVE12_OUT := MOVE(EN := DAQ_AO_U_WT_ENABLE, IN := DAQ_AO_U_WT_VALUE, ENO => _TMP_MOVE12_ENO);
  IF _TMP_MOVE12_ENO THEN
      DAQ_AO_U_WT_VALUE_PSM := _TMP_MOVE12_OUT;
  END_IF;
  DAQ_AO_U_WT_ENABLE_PSM := DAQ_AO_U_WT_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_I_WT
  VAR_INPUT
    DAQ_AO_I_WT_ENABLE : BOOL;
    DAQ_AO_I_WT_STACK : INT;
    DAQ_AO_I_WT_CHANNEL : INT;
    DAQ_AO_I_WT_VALUE : INT;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_I_WT_ENABLE_PSM : BOOL;
    DAQ_AO_I_WT_STACK_PSM : INT;
    DAQ_AO_I_WT_CHANNEL_PSM : INT;
    DAQ_AO_I_WT_VALUE_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE5_ENO : BOOL;
    _TMP_MOVE5_OUT : BOOL;
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_MOVE12_ENO : BOOL;
    _TMP_MOVE12_OUT : INT;
  END_VAR

  _TMP_MOVE5_OUT := MOVE(EN := DAQ_AO_I_WT_ENABLE, IN := 1, ENO => _TMP_MOVE5_ENO);
  IF _TMP_MOVE5_ENO THEN
      DAQ_AO_I_WT_ENABLE_PSM := _TMP_MOVE5_OUT;
  END_IF;
  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_I_WT_ENABLE, IN := DAQ_AO_I_WT_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_I_WT_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_I_WT_ENABLE, IN := DAQ_AO_I_WT_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_I_WT_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_MOVE12_OUT := MOVE(EN := DAQ_AO_I_WT_ENABLE, IN := DAQ_AO_I_WT_VALUE, ENO => _TMP_MOVE12_ENO);
  IF _TMP_MOVE12_ENO THEN
      DAQ_AO_I_WT_VALUE_PSM := _TMP_MOVE12_OUT;
  END_IF;
  DAQ_AO_I_WT_ENABLE_PSM := DAQ_AO_I_WT_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK DAQ_AO_OD_WT
  VAR_INPUT
    DAQ_AO_OD_WT_ENABLE : BOOL;
    DAQ_AO_OD_WT_STACK : INT;
    DAQ_AO_OD_WT_CHANNEL : INT;
    DAQ_AO_OD_WT_VALUE : INT;
  END_VAR
  VAR_EXTERNAL
    DAQ_AO_OD_WT_ENABLE_PSM : BOOL;
    DAQ_AO_OD_WT_STACK_PSM : INT;
    DAQ_AO_OD_WT_CHANNEL_PSM : INT;
    DAQ_AO_OD_WT_VALUE_PSM : INT;
  END_VAR
  VAR
    _TMP_MOVE81_ENO : BOOL;
    _TMP_MOVE81_OUT : INT;
    _TMP_MOVE9_ENO : BOOL;
    _TMP_MOVE9_OUT : INT;
    _TMP_MOVE12_ENO : BOOL;
    _TMP_MOVE12_OUT : INT;
  END_VAR

  _TMP_MOVE81_OUT := MOVE(EN := DAQ_AO_OD_WT_ENABLE, IN := DAQ_AO_OD_WT_STACK, ENO => _TMP_MOVE81_ENO);
  IF _TMP_MOVE81_ENO THEN
      DAQ_AO_OD_WT_STACK_PSM := _TMP_MOVE81_OUT;
  END_IF;
  _TMP_MOVE9_OUT := MOVE(EN := DAQ_AO_OD_WT_ENABLE, IN := DAQ_AO_OD_WT_CHANNEL, ENO => _TMP_MOVE9_ENO);
  IF _TMP_MOVE9_ENO THEN
      DAQ_AO_OD_WT_CHANNEL_PSM := _TMP_MOVE9_OUT;
  END_IF;
  _TMP_MOVE12_OUT := MOVE(EN := DAQ_AO_OD_WT_ENABLE, IN := DAQ_AO_OD_WT_VALUE, ENO => _TMP_MOVE12_ENO);
  IF _TMP_MOVE12_ENO THEN
      DAQ_AO_OD_WT_VALUE_PSM := _TMP_MOVE12_OUT;
  END_IF;
  DAQ_AO_OD_WT_ENABLE_PSM := DAQ_AO_OD_WT_ENABLE;
END_FUNCTION_BLOCK

FUNCTION_BLOCK PID_4_0
  VAR_INPUT
    ENABLE : BOOL;
  END_VAR
  VAR_EXTERNAL
    PID4_ENABLED_PSM : BOOL;
    CTRL_LOOP_INDEX_PSM : INT;
    KP_PSM : INT;
    TI_PSM : INT;
    TD_PSM : INT;
    PV_PSM : INT;
    SP_PSM : INT;
    ERROR_PSM : INT;
    INTEGRATIVE_PSM : INT;
    TIMEpsm : INT;
    OUT_CV_PSM : INT;
  END_VAR
  VAR_INPUT
    CTRL_LOOP_INDEX : INT;
    KP : REAL;
    TI : REAL;
    TD : REAL;
    SP : REAL;
    PV : REAL;
  END_VAR
  VAR_OUTPUT
    ERROR : REAL;
    INTEGRATIVE : REAL;
    TIMEvar : REAL;
    OUT_CV : REAL;
  END_VAR
  VAR
    _TMP_MOVE7_ENO : BOOL;
    _TMP_MOVE7_OUT : INT;
    _TMP_MUL18_ENO : BOOL;
    _TMP_MUL18_OUT : REAL;
    _TMP_REAL_TO_INT12_OUT : INT;
    _TMP_MUL37_ENO : BOOL;
    _TMP_MUL37_OUT : REAL;
    _TMP_REAL_TO_INT15_OUT : INT;
    _TMP_MUL28_ENO : BOOL;
    _TMP_MUL28_OUT : REAL;
    _TMP_REAL_TO_INT21_OUT : INT;
    _TMP_MUL29_ENO : BOOL;
    _TMP_MUL29_OUT : REAL;
    _TMP_REAL_TO_INT24_OUT : INT;
    _TMP_MUL34_ENO : BOOL;
    _TMP_MUL34_OUT : REAL;
    _TMP_REAL_TO_INT31_OUT : INT;
    _TMP_INT_TO_REAL39_OUT : REAL;
    _TMP_DIV38_ENO : BOOL;
    _TMP_DIV38_OUT : REAL;
    _TMP_INT_TO_REAL44_OUT : REAL;
    _TMP_DIV43_ENO : BOOL;
    _TMP_DIV43_OUT : REAL;
    _TMP_INT_TO_REAL54_OUT : REAL;
    _TMP_DIV53_ENO : BOOL;
    _TMP_DIV53_OUT : REAL;
    _TMP_INT_TO_REAL49_OUT : REAL;
    _TMP_DIV48_ENO : BOOL;
    _TMP_DIV48_OUT : REAL;
  END_VAR

  _TMP_MOVE7_OUT := MOVE(EN := ENABLE, IN := CTRL_LOOP_INDEX, ENO => _TMP_MOVE7_ENO);
  IF _TMP_MOVE7_ENO THEN
      CTRL_LOOP_INDEX_PSM := _TMP_MOVE7_OUT;
  END_IF;
  _TMP_MUL18_OUT := MUL(EN := ENABLE, IN1 := TI, IN2 := 100.0, ENO => _TMP_MUL18_ENO);
  _TMP_REAL_TO_INT12_OUT := REAL_TO_INT(_TMP_MUL18_OUT);
  TI_PSM := _TMP_REAL_TO_INT12_OUT;
  _TMP_MUL37_OUT := MUL(EN := ENABLE, IN1 := KP, IN2 := 100.0, ENO => _TMP_MUL37_ENO);
  _TMP_REAL_TO_INT15_OUT := REAL_TO_INT(_TMP_MUL37_OUT);
  KP_PSM := _TMP_REAL_TO_INT15_OUT;
  _TMP_MUL28_OUT := MUL(EN := ENABLE, IN1 := SP, IN2 := 100.0, ENO => _TMP_MUL28_ENO);
  _TMP_REAL_TO_INT21_OUT := REAL_TO_INT(_TMP_MUL28_OUT);
  SP_PSM := _TMP_REAL_TO_INT21_OUT;
  _TMP_MUL29_OUT := MUL(EN := ENABLE, IN1 := TD, IN2 := 100.0, ENO => _TMP_MUL29_ENO);
  _TMP_REAL_TO_INT24_OUT := REAL_TO_INT(_TMP_MUL29_OUT);
  TD_PSM := _TMP_REAL_TO_INT24_OUT;
  _TMP_MUL34_OUT := MUL(EN := ENABLE, IN1 := PV, IN2 := 100.0, ENO => _TMP_MUL34_ENO);
  _TMP_REAL_TO_INT31_OUT := REAL_TO_INT(_TMP_MUL34_OUT);
  PV_PSM := _TMP_REAL_TO_INT31_OUT;
  _TMP_INT_TO_REAL39_OUT := INT_TO_REAL(ERROR_PSM);
  _TMP_DIV38_OUT := DIV(EN := ENABLE, IN1 := _TMP_INT_TO_REAL39_OUT, IN2 := 100.0, ENO => _TMP_DIV38_ENO);
  IF _TMP_DIV38_ENO THEN
      ERROR := _TMP_DIV38_OUT;
  END_IF;
  _TMP_INT_TO_REAL44_OUT := INT_TO_REAL(INTEGRATIVE_PSM);
  _TMP_DIV43_OUT := DIV(EN := ENABLE, IN1 := _TMP_INT_TO_REAL44_OUT, IN2 := 100.0, ENO => _TMP_DIV43_ENO);
  IF _TMP_DIV43_ENO THEN
      INTEGRATIVE := _TMP_DIV43_OUT;
  END_IF;
  _TMP_INT_TO_REAL54_OUT := INT_TO_REAL(OUT_CV_PSM);
  _TMP_DIV53_OUT := DIV(EN := ENABLE, IN1 := _TMP_INT_TO_REAL54_OUT, IN2 := 100.0, ENO => _TMP_DIV53_ENO);
  IF _TMP_DIV53_ENO THEN
      OUT_CV := _TMP_DIV53_OUT;
  END_IF;
  _TMP_INT_TO_REAL49_OUT := INT_TO_REAL(TIMEpsm);
  _TMP_DIV48_OUT := DIV(EN := ENABLE, IN1 := _TMP_INT_TO_REAL49_OUT, IN2 := 100.0, ENO => _TMP_DIV48_ENO);
  IF _TMP_DIV48_ENO THEN
      TIMEvar := _TMP_DIV48_OUT;
  END_IF;
  PID4_ENABLED_PSM := ENABLE;
END_FUNCTION_BLOCK

PROGRAM a_Main_routine
  VAR_EXTERNAL
    Alive : BOOL;
  END_VAR
  VAR
    Alive0 : BOOL;
    TON0 : TON;
    TON1 : TON;
  END_VAR
  VAR_EXTERNAL
    always_false : BOOL;
    always_true : BOOL;
  END_VAR
  VAR_EXTERNAL
    DAQ_AI_I_ch1 : REAL;
    DAQ_AI_I_ch2 : REAL;
    DAQ_AI_I_ch3 : REAL;
    DAQ_AI_I_ch4 : REAL;
  END_VAR

  TON0(IN := NOT(TON1.q), PT := T#5000ms);
  Alive := TON0.Q;
  IF always_false THEN
    always_false := FALSE; (*reset*)
  END_IF;
  IF NOT(always_true) THEN
    always_true := TRUE; (*set*)
  END_IF;
  TON1(IN := TON0.Q, PT := T#5000ms);
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    VAR_GLOBAL
      always_false : BOOL := 0;
      always_true : BOOL := 1;
      Alive : BOOL;
      DAQ_AI_I_ENABLE_PSM : BOOL := 0;
      DAQ_AI_I_STACK_PSM : INT := 0;
      DAQ_AI_I_CHANNEL_PSM : INT := 0;
      DAQ_AI_I_PSM : INT := 0;
      DAQ_AI_I_ch1 : REAL := 0;
      DAQ_AI_I_ch2 : REAL := 0;
      DAQ_AI_I_ch3 : REAL := 0;
      DAQ_AI_I_ch4 : REAL := 0;
      DAQ_AO_U_WT_ENABLE_PSM : BOOL := 0;
      DAQ_AO_U_WT_STACK_PSM : INT := 0;
      DAQ_AO_U_WT_CHANNEL_PSM : INT := 0;
      DAQ_AO_U_WT_VALUE_PSM : INT := 0;
      DAQ_AO_U_RD_ENABLE_PSM : BOOL := 0;
      DAQ_AO_U_RD_STACK_PSM : INT := 0;
      DAQ_AO_U_RD_CHANNEL_PSM : INT := 0;
      DAQ_AO_U_RD_PSM : INT := 0;
      DAQ_AI_U_ENABLE_PSM : BOOL := 0;
      DAQ_AI_U_STACK_PSM : INT := 0;
      DAQ_AI_U_CHANNEL_PSM : INT := 0;
      DAQ_AI_U_PSM : INT := 0;
      DAQ_AO_I_WT_ENABLE_PSM : BOOL := 0;
      DAQ_AO_I_WT_STACK_PSM : INT := 0;
      DAQ_AO_I_WT_CHANNEL_PSM : INT := 0;
      DAQ_AO_I_WT_VALUE_PSM : INT := 0;
      DAQ_AO_I_RD_ENABLE_PSM : BOOL := 0;
      DAQ_AO_I_RD_STACK_PSM : INT := 0;
      DAQ_AO_I_RD_CHANNEL_PSM : INT := 0;
      DAQ_AO_I_RD_PSM : INT := 0;
      DAQ_AO_OD_WT_ENABLE_PSM : BOOL := 0;
      DAQ_AO_OD_WT_STACK_PSM : INT := 0;
      DAQ_AO_OD_WT_CHANNEL_PSM : INT := 0;
      DAQ_AO_OD_WT_VALUE_PSM : INT := 0;
      DAQ_AO_OD_RD_ENABLE_PSM : BOOL := 0;
      DAQ_AO_OD_RD_STACK_PSM : INT := 0;
      DAQ_AO_OD_RD_CHANNEL_PSM : INT := 0;
      DAQ_AO_OD_RD_PSM : INT := 0;
      DAQ_DI_OPTO_ENABLE_PSM : BOOL := 0;
      DAQ_DI_OPTO_STACK_PSM : INT := 0;
      DAQ_DI_OPTO_CHANNEL_PSM : INT := 0;
      DAQ_DI_OPTO_PSM : INT := 0;
      PID4_ENABLED_PSM : BOOL := 0;
      CTRL_LOOP_INDEX_PSM : INT := 0;
      KP_PSM : INT := 0;
      TI_PSM : INT := 0;
      TD_PSM : INT := 0;
      PV_PSM : INT := 0;
      SP_PSM : INT := 0;
      ERROR_PSM : INT := 0;
      INTEGRATIVE_PSM : INT := 0;
      TIMEpsm : INT := 0;
      OUT_CV_PSM : INT := 0;
      PID_OUT : INT := 0;
    END_VAR
    TASK Main(INTERVAL := T#100ms,PRIORITY := 1);
    PROGRAM instance00 WITH Main : a_Main_routine;
  END_RESOURCE
END_CONFIGURATION
