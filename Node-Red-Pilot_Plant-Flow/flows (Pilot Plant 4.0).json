[
    {
        "id": "9ce25e2cfa5a72d0",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c0e4aeca5ef3f4da",
        "type": "tab",
        "label": "Tank T01 level control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "422c888f31fe8026",
        "type": "tab",
        "label": "Tank T02 pressure control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10bc255372c174fe",
        "type": "tab",
        "label": "Line pressure control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac38cb94983d0eb8",
        "type": "tab",
        "label": "Flow rate control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58f44066c4db29a2",
        "type": "tab",
        "label": "Teste de nodes criados",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b4973237.46ab6",
        "type": "subflow",
        "name": "Process Simulation",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "ec719d4d.0d54f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "ae1a6e5.d4c0d9",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "8f693b65935172bb",
        "type": "subflow",
        "name": "Process Simulation (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7a8dddbe7a0f672c",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e3d236e33f45347b"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "b84bad3fb7f71e01",
        "type": "subflow",
        "name": "Process Simulation (3)",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "749e5adc1755e64f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "1bbdcd8936473296",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "a05e5c319bf2af76",
        "type": "subflow",
        "name": "Process Simulation (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "be9bf201cd1c89a3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "88d9eeee809098db",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "655b5955f9f514d9",
        "type": "subflow",
        "name": "Process Simulation (5)",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "8a91187d5650505f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "7962bec0e3ffe153",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "8eae017855081a70",
        "type": "subflow",
        "name": "Process Simulation (6)",
        "info": "",
        "in": [
            {
                "x": 37,
                "y": 103,
                "wires": [
                    {
                        "id": "5a4e49077db28084"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 728.5,
                "y": 294,
                "wires": [
                    {
                        "id": "6b5b525c18f6608a",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "260e0d9407bfe274",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "420684dbbf6da950",
            "55fa6e1d9a8d86fe",
            "8fe2551de57d405b",
            "df880e106bb5b1f4",
            "34aadeb58e25ae35",
            "edefed54d394d1b6",
            "943dc81db8194015",
            "4709beeda5877aae",
            "f695cebc2042aa25",
            "691d0911936c2489"
        ],
        "x": 694,
        "y": 19
    },
    {
        "id": "a8f729ae124277ca",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "cd15caaca5edbf32",
            "26efb15afeea0d5a",
            "a04481badea2fceb",
            "8cb88c28324c2680",
            "73122097956a3e8f",
            "523b7857464d3803",
            "fc91c6f972322a93",
            "17396f725010e96b",
            "1a759fe370284957"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "62dd48ab47bb4618",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Historical register",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.33",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "7d1c36430e241e6f",
            "84a63cf8de147427",
            "36310367f21938fe"
        ],
        "x": 974,
        "y": 359
    },
    {
        "id": "96f7a32b6c4d67ba",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Control Loops",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "fill-opacity": "0.36",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "09bf331cc33c34ed",
            "b4f0f9e4273d9640",
            "60dd832b895f5f23",
            "83f9e7ada4f191b0"
        ],
        "x": 14,
        "y": 199
    },
    {
        "id": "b4f61308d0e63de9",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#001f60",
            "fill": "#bfc7d7"
        },
        "nodes": [
            "55e235d456da1f04",
            "edb013181c9c20fe",
            "dcbd4d620ed24e25",
            "3db647bc4b4fa8ff",
            "9868ce6e305f0744",
            "bf72cf8af22ecea0",
            "7b4e7bd815099bd9",
            "c3fba5b3ae985aa0",
            "c4f544430936be2d",
            "9cc3760ffdd48c0f",
            "ff47ab38c55ef68f",
            "aee5671d2bae4dc4",
            "211f8cd3f47757e2",
            "9bf435b6918377c3",
            "16c41a9b47319107"
        ],
        "x": 14,
        "y": 359
    },
    {
        "id": "5a9d769754e13857",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "27977c08257e26fb",
            "63fe87ae763248ba",
            "2d613545c4eb1749",
            "cfc497ce0bc3ae05",
            "3ae4843d08ec2d8a",
            "a023e0fb0532eed0",
            "870e3c6e17ed4b66",
            "72a010dd17cda8ca"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "aa90a8e945f53c38",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Historical register",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.33",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "552b2b6331073ae1",
            "eddcdafaab4876f5",
            "9ca455a0307e5363"
        ],
        "x": 974,
        "y": 359
    },
    {
        "id": "fefc20d5608b40c1",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Control Loops",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "fill-opacity": "0.36",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "976a1c996c646fe2",
            "eeb9ef4bf7b52524",
            "8e58f717012dbfd5",
            "1b45e5f35fc6a29b"
        ],
        "x": 14,
        "y": 199
    },
    {
        "id": "15ccf8968e997bbd",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "5a936e660138cbf1",
            "e4ca14c167813e4e",
            "15cc98b8adb8df0d",
            "5751602b0223627b",
            "200cabf427b0d525",
            "df26c4eaefdf1128",
            "89c51b514c71af59",
            "0a6aec953c9e2401",
            "1fe8aa13ebbcbb20",
            "eafbf75506d4babc",
            "347e0a964c74a57d",
            "f27d17a376f26a07",
            "5b6b1780f4d8daf9",
            "3d3a783f41adece0",
            "6dabbfd4c0342c1a"
        ],
        "x": 14,
        "y": 359
    },
    {
        "id": "f95156c14d9fd0e1",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Historical register",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.33",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "9ff5b24ce9324aec",
            "e15bcacf4bbeb12c",
            "93ce3accdec50b30"
        ],
        "x": 974,
        "y": 399
    },
    {
        "id": "e066d64fac8bc17e",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "2bbcdab61c5ddb39",
            "88b9a0017edd13f8",
            "c97c70bca064ac1c",
            "37ca534490248375",
            "04080e4ace2a22c0",
            "9a237cc8caf23b60",
            "fd3c11a99cc90f63",
            "48b3836d25339e70",
            "8d47396a75617935",
            "618a2391bc7850e5",
            "294e7b76b46c7e5b"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "c850a697d03044f5",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Control Loops",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "fill-opacity": "0.36",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "ea1002a56fe85177",
            "0d91e0e6898e6623",
            "f4147c24df870db1",
            "9beb65244ff2e3fb"
        ],
        "x": 14,
        "y": 239
    },
    {
        "id": "9ad99076c086ca8d",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "607d1d755c2afc3d",
            "6d8860ceae8ea381",
            "8320ada1c6d153f1",
            "bd2a72ceccc2473e",
            "cfc01153883b0a9d",
            "8cf35ebf79b24886",
            "500b68774a2ab40c",
            "b36d21c6ea0dc295",
            "d7b38d8c2cf4cbc6",
            "6aea68b5e085a078",
            "36133c2af199ee12",
            "51b9bad1547ca255",
            "18e99b3215ab2525",
            "6ba588fbcedc2eba",
            "ac4a743973cc0ca3"
        ],
        "x": 14,
        "y": 399
    },
    {
        "id": "c82b8b4cad8b8fa8",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Historical register",
        "style": {
            "stroke": "#92d04f",
            "fill": "#c8e7a7",
            "fill-opacity": "0.33",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "dd84266fbb2920c1",
            "e32fd3a82bca2efa",
            "3991c9301da622af"
        ],
        "x": 994,
        "y": 419
    },
    {
        "id": "dd4409398f1f0774",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Enable",
        "style": {
            "stroke": "#6f2fa0",
            "label": true,
            "color": "#6f2fa0",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "d78c5d6a493fe4be",
            "80146d4370644dd4",
            "b505175bbbfbfe84",
            "bc4ee4c0f4e3e7ee",
            "857ed0c2326fff8a",
            "f990a852b477f7f0",
            "7f42450e37d94cab",
            "ba1b3a9485670bfe",
            "7e2948f99b298252",
            "d09248b1e9b1ec52",
            "c8fe68f506c11690"
        ],
        "x": 34,
        "y": 39
    },
    {
        "id": "73ee18af5c1bf4eb",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Control Loops",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ff7f7f",
            "fill-opacity": "0.36",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "a5b1e37a7ec5cd3b",
            "ca246f44b230227a",
            "34fddc388fef54d6",
            "e072665c22766896"
        ],
        "x": 34,
        "y": 259
    },
    {
        "id": "1eb1e7c78e7578db",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Reading PID4 params",
        "style": {
            "stroke": "#001f60",
            "fill": "#bfc7d7",
            "label": true,
            "color": "#001f60"
        },
        "nodes": [
            "b4c9aa02b60591e6",
            "99720bb9f8b0d32a",
            "295e2a790b597726",
            "749e42f5d8e2002f",
            "582660ad796819c9",
            "81f0838e29beeb1e",
            "4cdc3660af00aa81",
            "32e447140bcaf106",
            "3f63f848c1ce2096",
            "ceca18fa0506c219",
            "ac93421fb2307efa",
            "ff5b4f480fdaa3c2",
            "b93b02676ac9149d",
            "cbecf6d96c5860b6",
            "4e901b4fa2797696"
        ],
        "x": 34,
        "y": 419
    },
    {
        "id": "317de8e4868d033a",
        "type": "group",
        "z": "58f44066c4db29a2",
        "name": "Reading Input",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "358796e94df32580",
            "3fca2565cc860254",
            "c91efd0b61605248",
            "76975452a297d4db",
            "18c9611e641c8b0c",
            "3dd7cae5153aa739",
            "0663918219373ac8",
            "e124d9f9428c74ef",
            "2a32ba1e2f19c493"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "1203bf6fcb5525b0",
        "type": "group",
        "z": "58f44066c4db29a2",
        "name": "Set OutPut",
        "style": {
            "stroke": "#ffff00",
            "fill": "#ffffbf",
            "label": true,
            "color": "#ffC000"
        },
        "nodes": [
            "5f0e5a20cdd4a8f4",
            "9a3e09b8c3655bf7",
            "f63cdce30a770f8e",
            "84255527243cc7a7",
            "792a3185ca3f412d",
            "15310384b5224faa",
            "bfc077c58635b4d9",
            "32f4686259b5c5ca",
            "9f8766569fdde968"
        ],
        "x": 14,
        "y": 239
    },
    {
        "id": "be473d6f86f8f61a",
        "type": "group",
        "z": "58f44066c4db29a2",
        "name": "Reading OutPut",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "fb52fd37d9173d7f",
            "227b966451fa4b01",
            "5cfbeb41ce91e322",
            "e51ac46300818285",
            "41658f9b292ff741",
            "b8056334af2e759c",
            "daca420975a766d1",
            "b22cefdfa81fd51c",
            "04b03f49cbd7c057"
        ],
        "x": 654,
        "y": 19
    },
    {
        "id": "54e8e335bfbdd905",
        "type": "group",
        "z": "58f44066c4db29a2",
        "name": "PID 4.0",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "cf17ac967c531917",
            "85dadcd839250c41",
            "ebfeef4405ef0008",
            "f6c42dd644723f49"
        ],
        "x": 654,
        "y": 239
    },
    {
        "id": "1aa79a3612739140",
        "type": "group",
        "z": "9ce25e2cfa5a72d0",
        "name": "Reading tank pressure T02",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "03e708e20b8d7d53",
            "f0a47a0648868078",
            "9ae77178a6a9c779",
            "f9c93c867806cfb1",
            "a7c789c87b316dcb"
        ],
        "x": 14,
        "y": 19,
        "w": 812,
        "h": 122
    },
    {
        "id": "42e74617f30b33a4",
        "type": "group",
        "z": "9ce25e2cfa5a72d0",
        "name": "Reading Line pressure",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "c9b2206b47feb2e2",
            "de7707b499b6f5a0",
            "d9465a1e0d321e69",
            "c5568b0cb710acc9",
            "3306e7e56cd6e250"
        ],
        "x": 14,
        "y": 159,
        "w": 832,
        "h": 122
    },
    {
        "id": "e260bc37dee2b2b0",
        "type": "group",
        "z": "9ce25e2cfa5a72d0",
        "name": "Reading tank T01 level",
        "style": {
            "stroke": "#ffff00",
            "fill": "#ffffbf",
            "label": true,
            "color": "#ffC000"
        },
        "nodes": [
            "aff0da57f4507862",
            "b9b8e5fedee95e14",
            "ec53380cdf9ae6e3",
            "1dd30d69c4183feb",
            "d93363526988143a"
        ],
        "x": 14,
        "y": 299,
        "w": 832,
        "h": 122
    },
    {
        "id": "dce702261e3416f5",
        "type": "group",
        "z": "9ce25e2cfa5a72d0",
        "name": "Reading flow rate",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "64d35b47e4aeb877",
            "7438e13c40df58fb",
            "e2a6ada697b203e6",
            "10e2ab428b018c45",
            "6b13b1f6c8a33598"
        ],
        "x": 14,
        "y": 439,
        "w": 832,
        "h": 122
    },
    {
        "id": "151e9218e1993d04",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "8aaf18c166e10e8e",
            "279553e0a148808b",
            "f3bfab5eb5fc60f4",
            "0d3ddf76024eba13",
            "0889a5d057742734",
            "45e0db94ad50b633",
            "b75ab119ea021c80",
            "385abef0813e4f02",
            "9920a769c8f2668b"
        ],
        "x": 654,
        "y": 19
    },
    {
        "id": "856ed79b595ad76e",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "4257869adbef2f13",
            "111ae5b249d80bc0",
            "509fbd73e7d030db",
            "eb638032a5a1bcdc",
            "18239fa5a18a8616",
            "32e9358ed2677798",
            "37b7f6bde640df4d",
            "11dce03a3771b8a9",
            "058c7748604ded67"
        ],
        "x": 734,
        "y": 79
    },
    {
        "id": "b253d6814e713044",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Setpoint generation",
        "style": {
            "label": true,
            "color": "#0070c0",
            "stroke": "#0070c0",
            "fill": "#7fb7df",
            "fill-opacity": "0.32"
        },
        "nodes": [
            "51f1d3e368357b1c",
            "52d7ff420ee3667b",
            "b4f977b9eef2b7ba",
            "092683835ca30e55",
            "e60b39fd1f5031f1",
            "04c4ee1364ea7655",
            "46ceabb350113ccc",
            "f03675743a929cd9",
            "158d7f3a6d632ae6"
        ],
        "x": 734,
        "y": 79
    },
    {
        "id": "cf3b36080d855259",
        "type": "group",
        "z": "c0e4aeca5ef3f4da",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "5382fc3eed1a85df",
            "b3d267c817bc4a08",
            "abc5fd9b93768ab1",
            "2513c6fab440f392",
            "b99c1c6329c54e5b",
            "69e919587e7d081b",
            "fb6b9e93e141cfdb",
            "4fdad21861401a53",
            "ccb2b799c1d35a8a",
            "1170bf8b7d0c2263"
        ],
        "x": 974,
        "y": 459
    },
    {
        "id": "67204dff7ee1a7a4",
        "type": "group",
        "z": "422c888f31fe8026",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "296d9e97ed87df48",
            "ba713a7fb7069893",
            "f121bb1c3d5965f9",
            "ccf4d527ce3d5f76",
            "0f96c4d52f0d63b7",
            "a2b655bd7c057de7",
            "0d157b212890d1bb",
            "348c989f430d0971",
            "3b9b18e2519f9912",
            "5e649e5398833f1e"
        ],
        "x": 974,
        "y": 459
    },
    {
        "id": "d955a8b8686ce038",
        "type": "group",
        "z": "10bc255372c174fe",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "a8557186b240bdc2",
            "ad6e904dadae82ba",
            "a23fc135400d961c",
            "79000c1cfae9db27",
            "07ed8bdf1b73194d",
            "bd0430397b620ac2",
            "50dadbc6e84bfa5f",
            "5a15d1ed5f06aedf",
            "1ad7377343eb6a61",
            "5f8105e2f8c01d18"
        ],
        "x": 974,
        "y": 499
    },
    {
        "id": "fbc3496b9b5d615d",
        "type": "group",
        "z": "ac38cb94983d0eb8",
        "name": "Input Pid params",
        "style": {
            "stroke": "#ffff00",
            "label": true,
            "color": "#000000",
            "fill": "#ffffbf"
        },
        "nodes": [
            "01d30cb3f70c26b1",
            "d85b4fc5440e7d45",
            "b0aef8b8aec69db9",
            "0773f40110d5affd",
            "6dfd74a3fcf7e5ed",
            "4ab82418ac6e4df1",
            "3aa0dc7eb3b84136",
            "1188e6836e8c9984",
            "e3e9b9cdeb6f948f",
            "c94b72caf79c0faf"
        ],
        "x": 994,
        "y": 519
    },
    {
        "id": "d6b900cdfced3a6f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#0094ce",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Cores de configuracao",
                "default": "#4B7930",
                "baseColor": "#0094ce",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3b97d9079fca330a",
        "type": "ui_tab",
        "name": "TQ02  pressure Control",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "63ebd62b2640f3f7",
        "type": "moleculer-config",
        "name": "NATS_ext",
        "options": "{\"transporter\":\"nats://192.168.1.201:4222\"}"
    },
    {
        "id": "79a50bf451619962",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "53d52b40311b0dfb",
        "type": "moleculer-config",
        "name": "NATS_ext",
        "options": "{\"transporter\":\"nats://192.168.1.201:4222\"}"
    },
    {
        "id": "99bab43a879eb880",
        "type": "ui_tab",
        "name": "TQ01 level Control",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a3df8bce9e97a068",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "99bab43a879eb880",
        "order": 2,
        "disp": false,
        "width": 28,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5bc6236e1765bd89",
        "type": "ui_group",
        "name": "Input data",
        "tab": "99bab43a879eb880",
        "order": 1,
        "disp": false,
        "width": 18,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e95a32a49b5bce90",
        "type": "ui_group",
        "name": "Input data",
        "tab": "3b97d9079fca330a",
        "order": 2,
        "disp": false,
        "width": 11,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e894ef200ab6dd9a",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "3b97d9079fca330a",
        "order": 3,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "91e38bc7825fa3cd",
        "type": "ui_group",
        "name": "Flow rate",
        "tab": "79a50bf451619962",
        "order": 3,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e501dc41ef0476e6",
        "type": "ui_group",
        "name": "Tank level T01",
        "tab": "79a50bf451619962",
        "order": 4,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "94cd38ebf863b4fb",
        "type": "ui_group",
        "name": " Tank pressure T02",
        "tab": "79a50bf451619962",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "124cbeb13f41a385",
        "type": "ui_group",
        "name": "Line pressure",
        "tab": "79a50bf451619962",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "04670f1762726691",
        "type": "ui_tab",
        "name": "Line pressure",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0dd7e1bf0b208734",
        "type": "ui_group",
        "name": "Input data",
        "tab": "04670f1762726691",
        "order": 1,
        "disp": false,
        "width": 11,
        "collapse": false,
        "className": ""
    },
    {
        "id": "718989759ca7cebb",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "04670f1762726691",
        "order": 2,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "06ab69bf3e6de9f5",
        "type": "ui_tab",
        "name": "Flow rate",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "60f50f7f44315fd8",
        "type": "ui_group",
        "name": "Input data",
        "tab": "06ab69bf3e6de9f5",
        "order": 1,
        "disp": false,
        "width": 11,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b042bd4025be431",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "06ab69bf3e6de9f5",
        "order": 2,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7fe4b5c3.32e58c",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "ae1a6e5.d4c0d9"
            ]
        ]
    },
    {
        "id": "1bacd004.9753c",
        "type": "inject",
        "z": "b4973237.46ab6",
        "name": "Inject -0.2 at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "ec719d4d.0d54f8"
            ]
        ]
    },
    {
        "id": "999a52c2.f465f",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "7fe4b5c3.32e58c"
            ]
        ]
    },
    {
        "id": "ec719d4d.0d54f8",
        "type": "delay",
        "z": "b4973237.46ab6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "ede39236.1961f8"
            ]
        ]
    },
    {
        "id": "a823c9cf.2a6178",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "999a52c2.f465f"
            ]
        ]
    },
    {
        "id": "ae1a6e5.d4c0d9",
        "type": "function",
        "z": "b4973237.46ab6",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "ede39236.1961f8",
        "type": "range",
        "z": "b4973237.46ab6",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "a823c9cf.2a6178"
            ]
        ]
    },
    {
        "id": "e3d236e33f45347b",
        "type": "debug",
        "z": "7a8dddbe7a0f672c",
        "name": "Text file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "2bc71efddfbcf61d",
        "type": "function",
        "z": "b84bad3fb7f71e01",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "1bbdcd8936473296"
            ]
        ]
    },
    {
        "id": "47463eae7f3e477d",
        "type": "inject",
        "z": "b84bad3fb7f71e01",
        "name": "Inject -0.2 at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "749e5adc1755e64f"
            ]
        ]
    },
    {
        "id": "e18a6f90ba484e10",
        "type": "function",
        "z": "b84bad3fb7f71e01",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "2bc71efddfbcf61d"
            ]
        ]
    },
    {
        "id": "749e5adc1755e64f",
        "type": "delay",
        "z": "b84bad3fb7f71e01",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "ab00a38844c7c78b"
            ]
        ]
    },
    {
        "id": "327cc3f523653339",
        "type": "function",
        "z": "b84bad3fb7f71e01",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "e18a6f90ba484e10"
            ]
        ]
    },
    {
        "id": "1bbdcd8936473296",
        "type": "function",
        "z": "b84bad3fb7f71e01",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "ab00a38844c7c78b",
        "type": "range",
        "z": "b84bad3fb7f71e01",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "327cc3f523653339"
            ]
        ]
    },
    {
        "id": "eb4d3be50d00ae50",
        "type": "function",
        "z": "a05e5c319bf2af76",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "88d9eeee809098db"
            ]
        ]
    },
    {
        "id": "7d8a24eabd20d07a",
        "type": "inject",
        "z": "a05e5c319bf2af76",
        "name": "Inject -0.2 at start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "be9bf201cd1c89a3"
            ]
        ]
    },
    {
        "id": "eb5a14aa58082ffe",
        "type": "function",
        "z": "a05e5c319bf2af76",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "eb4d3be50d00ae50"
            ]
        ]
    },
    {
        "id": "be9bf201cd1c89a3",
        "type": "delay",
        "z": "a05e5c319bf2af76",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "b6087b0e8f603754"
            ]
        ]
    },
    {
        "id": "4e91c097bdaf7c76",
        "type": "function",
        "z": "a05e5c319bf2af76",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "eb5a14aa58082ffe"
            ]
        ]
    },
    {
        "id": "88d9eeee809098db",
        "type": "function",
        "z": "a05e5c319bf2af76",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "b6087b0e8f603754",
        "type": "range",
        "z": "a05e5c319bf2af76",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "property": "payload",
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "4e91c097bdaf7c76"
            ]
        ]
    },
    {
        "id": "76106b1e2bc186f0",
        "type": "function",
        "z": "655b5955f9f514d9",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "7962bec0e3ffe153"
            ]
        ]
    },
    {
        "id": "67da06664c0462d2",
        "type": "inject",
        "z": "655b5955f9f514d9",
        "name": "Inject -0.2 at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "8a91187d5650505f"
            ]
        ]
    },
    {
        "id": "72f837d455fde26a",
        "type": "function",
        "z": "655b5955f9f514d9",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "76106b1e2bc186f0"
            ]
        ]
    },
    {
        "id": "8a91187d5650505f",
        "type": "delay",
        "z": "655b5955f9f514d9",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "91613d41ce1eaa4a"
            ]
        ]
    },
    {
        "id": "3658b6be8f94b095",
        "type": "function",
        "z": "655b5955f9f514d9",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "72f837d455fde26a"
            ]
        ]
    },
    {
        "id": "7962bec0e3ffe153",
        "type": "function",
        "z": "655b5955f9f514d9",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "91613d41ce1eaa4a",
        "type": "range",
        "z": "655b5955f9f514d9",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "3658b6be8f94b095"
            ]
        ]
    },
    {
        "id": "fa57bde30126752f",
        "type": "function",
        "z": "8eae017855081a70",
        "name": "30 sec RC + 20",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 626.5,
        "y": 207,
        "wires": [
            [
                "6b5b525c18f6608a"
            ]
        ]
    },
    {
        "id": "5c3bce5fcef0ec0f",
        "type": "inject",
        "z": "8eae017855081a70",
        "name": "Inject -0.2 at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "-0.2",
        "payloadType": "num",
        "x": 134.5,
        "y": 30,
        "wires": [
            [
                "5a4e49077db28084"
            ]
        ]
    },
    {
        "id": "f918cb1094096640",
        "type": "function",
        "z": "8eae017855081a70",
        "name": "10 sec RC",
        "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 451,
        "y": 207,
        "wires": [
            [
                "fa57bde30126752f"
            ]
        ]
    },
    {
        "id": "5a4e49077db28084",
        "type": "delay",
        "z": "8eae017855081a70",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 268,
        "y": 104,
        "wires": [
            [
                "7283114720610ed0"
            ]
        ]
    },
    {
        "id": "3da7378fc27e864a",
        "type": "function",
        "z": "8eae017855081a70",
        "name": "2 msg transport delay",
        "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 258,
        "y": 208,
        "wires": [
            [
                "f918cb1094096640"
            ]
        ]
    },
    {
        "id": "6b5b525c18f6608a",
        "type": "function",
        "z": "8eae017855081a70",
        "name": "Clear all except payload",
        "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "x": 545,
        "y": 293,
        "wires": [
            []
        ]
    },
    {
        "id": "7283114720610ed0",
        "type": "range",
        "z": "8eae017855081a70",
        "minin": "0",
        "maxin": "1",
        "minout": "0",
        "maxout": "100",
        "action": "scale",
        "round": false,
        "name": "",
        "x": 87,
        "y": 208,
        "wires": [
            [
                "3da7378fc27e864a"
            ]
        ]
    },
    {
        "id": "03e708e20b8d7d53",
        "type": "inject",
        "z": "9ce25e2cfa5a72d0",
        "g": "1aa79a3612739140",
        "name": "injetar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "a7c789c87b316dcb"
            ]
        ]
    },
    {
        "id": "0cc62bd2e8072699",
        "type": "comment",
        "z": "9ce25e2cfa5a72d0",
        "name": "GetInputCurrent",
        "info": "Reading GetInputCurrent \nIt reads the four current input channels from 4mA to 20mA.\n\nVia Api:**http://192.168.1.201:3005/api/megaind-rpi.getOutputCurrent?**\n\nVia Transporter call daq.riin\nTransporter Nats: **{\"transporter\":\"nats://192.168.1.201:4222\"}**\n\nArray position:\n0 = sensor PIT129 tank pressure T02\n1 = sensor PIT118 line pressure\n2 = sensor LIT125 tank level T01\n3 = sensor FIT116 flow rate",
        "x": 940,
        "y": 40,
        "wires": []
    },
    {
        "id": "c9b2206b47feb2e2",
        "type": "debug",
        "z": "9ce25e2cfa5a72d0",
        "g": "42e74617f30b33a4",
        "name": "PIT118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "aff0da57f4507862",
        "type": "debug",
        "z": "9ce25e2cfa5a72d0",
        "g": "e260bc37dee2b2b0",
        "name": "LIT 125",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "64d35b47e4aeb877",
        "type": "debug",
        "z": "9ce25e2cfa5a72d0",
        "g": "dce702261e3416f5",
        "name": "FIT116",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "f0a47a0648868078",
        "type": "ui_gauge",
        "z": "9ce25e2cfa5a72d0",
        "g": "1aa79a3612739140",
        "name": "",
        "group": "94cd38ebf863b4fb",
        "order": 1,
        "width": 7,
        "height": 7,
        "gtype": "compass",
        "title": "PIT129 ",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "b9b8e5fedee95e14",
        "type": "ui_gauge",
        "z": "9ce25e2cfa5a72d0",
        "g": "e260bc37dee2b2b0",
        "name": "",
        "group": "e501dc41ef0476e6",
        "order": 1,
        "width": 7,
        "height": 7,
        "gtype": "compass",
        "title": "LIT 125",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 380,
        "wires": []
    },
    {
        "id": "7438e13c40df58fb",
        "type": "ui_gauge",
        "z": "9ce25e2cfa5a72d0",
        "g": "dce702261e3416f5",
        "name": "",
        "group": "91e38bc7825fa3cd",
        "order": 1,
        "width": 7,
        "height": 7,
        "gtype": "compass",
        "title": "FIT116",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "de7707b499b6f5a0",
        "type": "ui_gauge",
        "z": "9ce25e2cfa5a72d0",
        "g": "42e74617f30b33a4",
        "name": "",
        "group": "124cbeb13f41a385",
        "order": 1,
        "width": 7,
        "height": 7,
        "gtype": "compass",
        "title": "PIT118",
        "label": "%",
        "format": "{{payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "d9465a1e0d321e69",
        "type": "inject",
        "z": "9ce25e2cfa5a72d0",
        "g": "42e74617f30b33a4",
        "name": "injetar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "3306e7e56cd6e250"
            ]
        ]
    },
    {
        "id": "ec53380cdf9ae6e3",
        "type": "inject",
        "z": "9ce25e2cfa5a72d0",
        "g": "e260bc37dee2b2b0",
        "name": "injetar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 120,
        "y": 360,
        "wires": [
            [
                "d93363526988143a"
            ]
        ]
    },
    {
        "id": "e2a6ada697b203e6",
        "type": "inject",
        "z": "9ce25e2cfa5a72d0",
        "g": "dce702261e3416f5",
        "name": "injetar",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "6b13b1f6c8a33598"
            ]
        ]
    },
    {
        "id": "9ae77178a6a9c779",
        "type": "function",
        "z": "9ce25e2cfa5a72d0",
        "g": "1aa79a3612739140",
        "name": "Global PIT129",
        "func": "global.set(\"PIT129\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "f9c93c867806cfb1",
                "f0a47a0648868078"
            ]
        ]
    },
    {
        "id": "c5568b0cb710acc9",
        "type": "function",
        "z": "9ce25e2cfa5a72d0",
        "g": "42e74617f30b33a4",
        "name": "Global PIT118",
        "func": "global.set(\"PIT118\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "c9b2206b47feb2e2",
                "de7707b499b6f5a0"
            ]
        ]
    },
    {
        "id": "1dd30d69c4183feb",
        "type": "function",
        "z": "9ce25e2cfa5a72d0",
        "g": "e260bc37dee2b2b0",
        "name": "Global LIT125",
        "func": "global.set(\"LIT125\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 360,
        "wires": [
            [
                "aff0da57f4507862",
                "b9b8e5fedee95e14"
            ]
        ]
    },
    {
        "id": "10e2ab428b018c45",
        "type": "function",
        "z": "9ce25e2cfa5a72d0",
        "g": "dce702261e3416f5",
        "name": "Global FIT116",
        "func": "global.set(\"FIT116\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "64d35b47e4aeb877",
                "7438e13c40df58fb"
            ]
        ]
    },
    {
        "id": "f9c93c867806cfb1",
        "type": "debug",
        "z": "9ce25e2cfa5a72d0",
        "g": "1aa79a3612739140",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "a7c789c87b316dcb",
        "type": "moleculer-DAQ_AI_I",
        "z": "9ce25e2cfa5a72d0",
        "g": "1aa79a3612739140",
        "broker": "63ebd62b2640f3f7",
        "name": "PIT129",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "Channel_1",
        "stack": "0",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "9ae77178a6a9c779"
            ]
        ]
    },
    {
        "id": "3306e7e56cd6e250",
        "type": "moleculer-DAQ_AI_I",
        "z": "9ce25e2cfa5a72d0",
        "g": "42e74617f30b33a4",
        "broker": "63ebd62b2640f3f7",
        "name": "PIT118",
        "topic": "",
        "options": "{}",
        "ident": "1",
        "pv": "Channel_2",
        "stack": "0",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "c5568b0cb710acc9"
            ]
        ]
    },
    {
        "id": "d93363526988143a",
        "type": "moleculer-DAQ_AI_I",
        "z": "9ce25e2cfa5a72d0",
        "g": "e260bc37dee2b2b0",
        "broker": "63ebd62b2640f3f7",
        "name": "LIT125",
        "topic": "",
        "options": "{}",
        "ident": "2",
        "pv": "Channel_3",
        "stack": "0",
        "x": 300,
        "y": 360,
        "wires": [
            [
                "1dd30d69c4183feb"
            ]
        ]
    },
    {
        "id": "6b13b1f6c8a33598",
        "type": "moleculer-DAQ_AI_I",
        "z": "9ce25e2cfa5a72d0",
        "g": "dce702261e3416f5",
        "broker": "63ebd62b2640f3f7",
        "name": "FIT116",
        "topic": "",
        "options": "{}",
        "ident": "3",
        "pv": "Channel_4",
        "stack": "0",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "10e2ab428b018c45"
            ]
        ]
    },
    {
        "id": "55e235d456da1f04",
        "type": "ui_chart",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "",
        "group": "a3df8bce9e97a068",
        "order": 1,
        "width": 28,
        "height": 10,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ccff",
            "#80ff00",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "edb013181c9c20fe",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.proportionalConstant",
        "func": "var local_proportionalConstant = flow.get(\"Ctrl.Loop1.proportionalConstant\");\nmsg.payload = local_proportionalConstant;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "bf72cf8af22ecea0"
            ]
        ]
    },
    {
        "id": "dcbd4d620ed24e25",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.derivativeTimeInMs",
        "func": "var local_derivativeTimeInMs = flow.get(\"Ctrl.Loop1.derivative\");\nmsg.payload = local_derivativeTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "9868ce6e305f0744"
            ]
        ]
    },
    {
        "id": "3db647bc4b4fa8ff",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.integrative",
        "func": "var local_resetTimeInMs = flow.get(\"Ctrl.Loop1.integrative\");\nmsg.payload = local_resetTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 520,
        "wires": [
            [
                "7b4e7bd815099bd9"
            ]
        ]
    },
    {
        "id": "9868ce6e305f0744",
        "type": "ui_text",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "group": "5bc6236e1765bd89",
        "order": 10,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "bf72cf8af22ecea0",
        "type": "ui_text",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "group": "5bc6236e1765bd89",
        "order": 7,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "7b4e7bd815099bd9",
        "type": "ui_text",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "group": "5bc6236e1765bd89",
        "order": 13,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "c3fba5b3ae985aa0",
        "type": "inject",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "dcbd4d620ed24e25",
                "edb013181c9c20fe",
                "3db647bc4b4fa8ff",
                "c4f544430936be2d",
                "ff47ab38c55ef68f",
                "211f8cd3f47757e2",
                "9bf435b6918377c3",
                "16c41a9b47319107"
            ]
        ]
    },
    {
        "id": "c4f544430936be2d",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.LIT125",
        "func": "var local_LIT125 = global.get(\"LIT125\");\nmsg.payload = local_LIT125;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "9cc3760ffdd48c0f"
            ]
        ]
    },
    {
        "id": "9cc3760ffdd48c0f",
        "type": "ui_gauge",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 1,
        "width": 18,
        "height": 10,
        "gtype": "wave",
        "title": "Tank T01 level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 400,
        "wires": []
    },
    {
        "id": "ff47ab38c55ef68f",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.manipulated variable",
        "func": "var local_mv = flow.get(\"Ctrl.Loop1.mv\");\nmsg.payload = local_mv;\nmsg.topic = \"Manipulate variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "aee5671d2bae4dc4"
            ]
        ]
    },
    {
        "id": "aee5671d2bae4dc4",
        "type": "ui_chart",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "",
        "group": "a3df8bce9e97a068",
        "order": 2,
        "width": 28,
        "height": 7,
        "label": "Manipulated variable X Error",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "5",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#fa1100",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "211f8cd3f47757e2",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.Set Point",
        "func": "var local_SetPoint = flow.get(\"setpoint\");\nmsg.payload = local_SetPoint;\nmsg.topic = \"Set Point\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "55e235d456da1f04"
            ]
        ]
    },
    {
        "id": "cd15caaca5edbf32",
        "type": "ui_button",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 15,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "73122097956a3e8f",
                "8cb88c28324c2680"
            ]
        ]
    },
    {
        "id": "26efb15afeea0d5a",
        "type": "ui_button",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 16,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "8cb88c28324c2680",
                "73122097956a3e8f"
            ]
        ]
    },
    {
        "id": "a04481badea2fceb",
        "type": "ui_switch",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "5bc6236e1765bd89",
        "order": 14,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "8cb88c28324c2680",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "Flow Eneable",
        "func": "   if(global.get(\"M2\") == 1 || global.get(\"M3\") == 1){\n      flow.set(\"Eneable\",0) \n      msg.payload = \"desativado por outra malha\"\n      return msg;\n   }\n   else{\nif (msg.payload === true) {\n   flow.set(\"Eneable\",1)\n   global.set(\"M1\", 1)\n   msg.payload = \"acionado\"\n   return msg;\n\n}else{\n   flow.set(\"Eneable\",0) \n   global.set(\"M1\", 0)\n   msg.payload = \"desativado\"\n   return msg;\n}\n   }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "1a759fe370284957"
            ]
        ]
    },
    {
        "id": "9bf435b6918377c3",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "GET.Error",
        "func": "var local_mv = flow.get(\"Ctrl.Loop1.error\");\nmsg.payload = local_mv;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "aee5671d2bae4dc4"
            ]
        ]
    },
    {
        "id": "7d1c36430e241e6f",
        "type": "inject",
        "z": "c0e4aeca5ef3f4da",
        "g": "62dd48ab47bb4618",
        "name": "Values to history",
        "props": [
            {
                "p": "Var001",
                "v": "LIT125",
                "vt": "global"
            },
            {
                "p": "Var002",
                "v": "SinusSetpoint",
                "vt": "global"
            },
            {
                "p": "Var003",
                "v": "Ctrl.Loop1.mv",
                "vt": "global"
            },
            {
                "p": "Var004",
                "v": "Ctrl.Loop1.error",
                "vt": "global"
            }
        ],
        "repeat": "1.0",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 1110,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "84a63cf8de147427",
        "type": "debug",
        "z": "c0e4aeca5ef3f4da",
        "g": "62dd48ab47bb4618",
        "name": "Out visualization",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 400,
        "wires": []
    },
    {
        "id": "36310367f21938fe",
        "type": "HistoricalRegister",
        "z": "c0e4aeca5ef3f4da",
        "g": "62dd48ab47bb4618",
        "logfilename": "Hist_20240119a",
        "enable": "1",
        "x": 1350,
        "y": 400,
        "wires": [
            [
                "84a63cf8de147427"
            ]
        ]
    },
    {
        "id": "09bf331cc33c34ed",
        "type": "inject",
        "z": "c0e4aeca5ef3f4da",
        "g": "96f7a32b6c4d67ba",
        "name": "Trigger [enable, SP, PV, kp, td, ti]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            },
            {
                "p": "setpoint",
                "v": "Ctrl.Loop1.setpoint",
                "vt": "flow"
            },
            {
                "p": "pv",
                "v": "LIT125",
                "vt": "global"
            },
            {
                "p": "kp",
                "v": "Kp_1",
                "vt": "flow"
            },
            {
                "p": "td",
                "v": "Td_1",
                "vt": "flow"
            },
            {
                "p": "ti",
                "v": "Ti_1",
                "vt": "flow"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "60dd832b895f5f23"
            ]
        ]
    },
    {
        "id": "b4f0f9e4273d9640",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "96f7a32b6c4d67ba",
        "name": "Extract inputs from PID4.0/data",
        "func": "//Extract and individualize input variables from PID4.0/data\nflow.set(\"Ctrl.Loop1.proportionalConstant\", msg.payload.kp);\nflow.set(\"Ctrl.Loop1.integrative\", msg.payload.ti);\nflow.set(\"Ctrl.Loop1.derivative\", msg.payload.td);\nflow.set(\"Ctrl.Loop1.mv\", msg.payload.manipulatedVariable);\nflow.set(\"Ctrl.Loop1.error\", msg.payload.error);\nflow.set(\"Ctrl.Loop1.pv\", msg.payload.pv);\nflow.set(\"setpoint\", msg.payload.setpoint);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "60dd832b895f5f23",
        "type": "moleculer-PID4",
        "z": "c0e4aeca5ef3f4da",
        "g": "96f7a32b6c4d67ba",
        "broker": "63ebd62b2640f3f7",
        "name": "Tank_T01_level_CTRL_Loop",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "0",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-31.pidplus",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "83f9e7ada4f191b0"
            ],
            [
                "b4f0f9e4273d9640"
            ]
        ]
    },
    {
        "id": "73122097956a3e8f",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === false) {\n        msg.enable = 1;\n    } else {\n        msg.enable = 0;\n    }\n    \n    msg.mv = 0;\n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 60,
        "wires": [
            [
                "523b7857464d3803"
            ]
        ]
    },
    {
        "id": "83f9e7ada4f191b0",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "c0e4aeca5ef3f4da",
        "g": "96f7a32b6c4d67ba",
        "broker": "63ebd62b2640f3f7",
        "name": "pump 2",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "out": "Channel_2",
        "stack": "0",
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "523b7857464d3803",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "1",
        "out": "Channel_2",
        "stack": "0",
        "x": 580,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "fc91c6f972322a93",
        "type": "inject",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "17396f725010e96b"
            ]
        ]
    },
    {
        "id": "17396f725010e96b",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "Enable switch",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "a04481badea2fceb"
            ]
        ]
    },
    {
        "id": "1a759fe370284957",
        "type": "debug",
        "z": "c0e4aeca5ef3f4da",
        "g": "a8f729ae124277ca",
        "name": "Tank T01",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "420684dbbf6da950",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 70;\nvar VoutMin = 20;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 80,
        "wires": [
            [
                "55fa6e1d9a8d86fe"
            ]
        ]
    },
    {
        "id": "55fa6e1d9a8d86fe",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "Ctrl.Loop1.setpoint",
        "func": "flow.set(\"Ctrl.Loop1.setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8fe2551de57d405b",
        "type": "inject",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint_T01",
        "payloadType": "flow",
        "x": 850,
        "y": 120,
        "wires": [
            [
                "34aadeb58e25ae35"
            ]
        ]
    },
    {
        "id": "df880e106bb5b1f4",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "select_setpoint_T01",
        "func": "flow.set(\"select_setpoint_T01\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "34aadeb58e25ae35",
        "type": "switch",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "420684dbbf6da950"
            ],
            [
                "943dc81db8194015"
            ],
            [
                "edefed54d394d1b6"
            ]
        ]
    },
    {
        "id": "edefed54d394d1b6",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 20;\nvar VoutMax = 70;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef =0.05\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 30;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 160,
        "wires": [
            [
                "55fa6e1d9a8d86fe"
            ]
        ]
    },
    {
        "id": "943dc81db8194015",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "Cosinus wave - Generator",
        "func": "//Cosine wave function calculation\n//Sine wave function calculation\nvar x = flow.get(\"My_arc002\") + ((Math.PI *2)/300); //300 points in the arc\nflow.set(\"My_arc002\", x)\nif (flow.get(\"My_arc002\") >= (Math.PI *2)) { flow.set(\"My_arc002\", 0.0) };\nvar CosGen = Math.cos(x);\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 70;\nvar VoutMin = 20;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((CosGen+1)/AngCoef) + VoutMin ;\n\n//flow Var Level Setpoint definition\nflow.set(\"CosinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc002\", 0.0); //Varies the number from 0 to Pi/2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 120,
        "wires": [
            [
                "55fa6e1d9a8d86fe"
            ]
        ]
    },
    {
        "id": "4709beeda5877aae",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "Saw tooth generator",
        "func": "var xx = global.get(\"Increase001\") + 0.2;\nglobal.set(\"Increase001\", xx);\nif (global.get(\"Increase001\") >= 80.0) { global.set(\"Increase001\", 30.0) };\nmsg.payload = xx;\nglobal.set(\"SawtoothSetpoint\", xx);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nglobal.set(\"Increase001\", 30.0);",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f695cebc2042aa25",
        "type": "ui_text",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "group": "5bc6236e1765bd89",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "691d0911936c2489",
        "type": "ui_dropdown",
        "z": "c0e4aeca5ef3f4da",
        "g": "260e0d9407bfe274",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "5bc6236e1765bd89",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Cosinus Setpoint",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 820,
        "y": 300,
        "wires": [
            [
                "df880e106bb5b1f4"
            ]
        ]
    },
    {
        "id": "16c41a9b47319107",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "b4f61308d0e63de9",
        "name": "pv",
        "func": "var local_pv = flow.get(\"Ctrl.Loop1.pv\");\nmsg.payload = local_pv;\nmsg.topic = \"Process variable\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 640,
        "wires": [
            [
                "55e235d456da1f04"
            ]
        ]
    },
    {
        "id": "5382fc3eed1a85df",
        "type": "ui_numeric",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "5bc6236e1765bd89",
        "order": 6,
        "width": 7,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.5",
        "className": "",
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "b3d267c817bc4a08"
            ]
        ]
    },
    {
        "id": "b3d267c817bc4a08",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "Kp",
        "func": "flow.set(\"Kp_1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "abc5fd9b93768ab1",
        "type": "ui_numeric",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "5bc6236e1765bd89",
        "order": 9,
        "width": 7,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1290,
        "y": 620,
        "wires": [
            [
                "2513c6fab440f392"
            ]
        ]
    },
    {
        "id": "2513c6fab440f392",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "Td",
        "func": "flow.set(\"Td_1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b99c1c6329c54e5b",
        "type": "function",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "Ti",
        "func": "flow.set(\"Ti_1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "69e919587e7d081b",
        "type": "ui_numeric",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "5bc6236e1765bd89",
        "order": 12,
        "width": 7,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.01",
        "className": "",
        "x": 1290,
        "y": 680,
        "wires": [
            [
                "b99c1c6329c54e5b"
            ]
        ]
    },
    {
        "id": "fb6b9e93e141cfdb",
        "type": "ui_text",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "group": "5bc6236e1765bd89",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1350,
        "y": 500,
        "wires": []
    },
    {
        "id": "4fdad21861401a53",
        "type": "ui_button",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "3",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 560,
        "wires": [
            [
                "5382fc3eed1a85df"
            ]
        ]
    },
    {
        "id": "ccb2b799c1d35a8a",
        "type": "ui_button",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "abc5fd9b93768ab1"
            ]
        ]
    },
    {
        "id": "1170bf8b7d0c2263",
        "type": "ui_button",
        "z": "c0e4aeca5ef3f4da",
        "g": "cf3b36080d855259",
        "name": "",
        "group": "5bc6236e1765bd89",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "12",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "69e919587e7d081b"
            ]
        ]
    },
    {
        "id": "5a936e660138cbf1",
        "type": "ui_chart",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "",
        "group": "e894ef200ab6dd9a",
        "order": 1,
        "width": 20,
        "height": 7,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ff4c",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e4ca14c167813e4e",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.proportionalConstant",
        "func": "var local_proportionalConstant = flow.get(\"Ctrl.Loop2.proportionalConstant\");\nmsg.payload = local_proportionalConstant;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "df26c4eaefdf1128"
            ]
        ]
    },
    {
        "id": "15cc98b8adb8df0d",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.derivativeTimeInMs",
        "func": "var local_derivativeTimeInMs = flow.get(\"Ctrl.Loop2.derivative\");\nmsg.payload = local_derivativeTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "200cabf427b0d525"
            ]
        ]
    },
    {
        "id": "5751602b0223627b",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.resetTimeInMs",
        "func": "var local_resetTimeInMs = flow.get(\"Ctrl.Loop2.integrative\");\nmsg.payload = local_resetTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "89c51b514c71af59"
            ]
        ]
    },
    {
        "id": "200cabf427b0d525",
        "type": "ui_text",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "group": "e95a32a49b5bce90",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "df26c4eaefdf1128",
        "type": "ui_text",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "group": "e95a32a49b5bce90",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "89c51b514c71af59",
        "type": "ui_text",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "group": "e95a32a49b5bce90",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "0a6aec953c9e2401",
        "type": "inject",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "15cc98b8adb8df0d",
                "e4ca14c167813e4e",
                "5751602b0223627b",
                "1fe8aa13ebbcbb20",
                "347e0a964c74a57d",
                "5b6b1780f4d8daf9",
                "3d3a783f41adece0",
                "6dabbfd4c0342c1a"
            ]
        ]
    },
    {
        "id": "1fe8aa13ebbcbb20",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.PIT129",
        "func": "var local_PIT129 = global.get(\"PIT129\");\nmsg.payload = local_PIT129;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "eafbf75506d4babc"
            ]
        ]
    },
    {
        "id": "eafbf75506d4babc",
        "type": "ui_gauge",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 1,
        "width": 11,
        "height": 6,
        "gtype": "compass",
        "title": "Tank To2 Pressure",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 400,
        "wires": []
    },
    {
        "id": "347e0a964c74a57d",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.manipulated variable",
        "func": "var local_mv = flow.get(\"Ctrl.Loop2.mv\");\nmsg.payload = local_mv;\nmsg.topic = \"Manipulate variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "f27d17a376f26a07"
            ]
        ]
    },
    {
        "id": "f27d17a376f26a07",
        "type": "ui_chart",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "",
        "group": "e894ef200ab6dd9a",
        "order": 2,
        "width": 20,
        "height": 6,
        "label": "Manipulated variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5b6b1780f4d8daf9",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.Set Point",
        "func": "var local_SetPoint = flow.get(\"setpoint2\");\nmsg.payload = local_SetPoint;\nmsg.topic = \"Set Point\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "5a936e660138cbf1"
            ]
        ]
    },
    {
        "id": "27977c08257e26fb",
        "type": "ui_button",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "3ae4843d08ec2d8a",
                "cfc497ce0bc3ae05"
            ]
        ]
    },
    {
        "id": "63fe87ae763248ba",
        "type": "ui_button",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "cfc497ce0bc3ae05",
                "3ae4843d08ec2d8a"
            ]
        ]
    },
    {
        "id": "2d613545c4eb1749",
        "type": "ui_switch",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "e95a32a49b5bce90",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cfc497ce0bc3ae05",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "Flow Eneable",
        "func": "\nif (msg.payload === true) {\n\n   flow.set(\"Eneable\",1)\n   return msg;\n\n}else{\n   flow.set(\"Eneable\",0)  \n   return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "552b2b6331073ae1",
        "type": "debug",
        "z": "422c888f31fe8026",
        "g": "aa90a8e945f53c38",
        "name": "Out visualization",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 400,
        "wires": []
    },
    {
        "id": "eddcdafaab4876f5",
        "type": "HistoricalRegister",
        "z": "422c888f31fe8026",
        "g": "aa90a8e945f53c38",
        "logfilename": "Hist_20240119a",
        "enable": "1",
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "552b2b6331073ae1"
            ]
        ]
    },
    {
        "id": "976a1c996c646fe2",
        "type": "moleculer-PID4",
        "z": "422c888f31fe8026",
        "g": "fefc20d5608b40c1",
        "broker": "63ebd62b2640f3f7",
        "name": "Tank_T02_pressure_CTRL_Loop",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "1",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-32.pidplus",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "8e58f717012dbfd5"
            ],
            [
                "eeb9ef4bf7b52524"
            ]
        ]
    },
    {
        "id": "eeb9ef4bf7b52524",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "fefc20d5608b40c1",
        "name": "Extract inputs from PID4.0/data",
        "func": "//Extract and individualize input variables from PID4.0/data\nflow.set(\"Ctrl.Loop2.proportionalConstant\", msg.payload.kp);\nflow.set(\"Ctrl.Loop2.integrative\", msg.payload.ti);\nflow.set(\"Ctrl.Loop2.derivative\", msg.payload.td);\nflow.set(\"Ctrl.Loop2.mv\", msg.payload.manipulatedVariable);\nflow.set(\"Ctrl.Loop2.error\", msg.payload.error);\nflow.set(\"Ctrl.Loop2.pv\", msg.payload.pv);\nflow.set(\"setpoint2\", msg.payload.setpoint);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3d3a783f41adece0",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "GET.Error",
        "func": "var local_mv = flow.get(\"Ctrl.Loop2.error\");\nmsg.payload = local_mv;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "f27d17a376f26a07"
            ]
        ]
    },
    {
        "id": "9ca455a0307e5363",
        "type": "inject",
        "z": "422c888f31fe8026",
        "g": "aa90a8e945f53c38",
        "name": "Values to history",
        "props": [
            {
                "p": "Var001",
                "v": "PIT129",
                "vt": "global"
            },
            {
                "p": "Var002",
                "v": "SinusSetpoint",
                "vt": "global"
            },
            {
                "p": "Var003",
                "v": "Ctrl.Loop2.mv",
                "vt": "global"
            },
            {
                "p": "Var004",
                "v": "Ctrl.Loop2.error",
                "vt": "global"
            }
        ],
        "repeat": "1.0",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 1110,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3ae4843d08ec2d8a",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === false) {\n        msg.enable = 1;\n    } else {\n        msg.enable = 0;\n    }\n    \n    msg.mv = 0;\n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            [
                "a023e0fb0532eed0"
            ]
        ]
    },
    {
        "id": "8e58f717012dbfd5",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "422c888f31fe8026",
        "g": "fefc20d5608b40c1",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 1",
        "topic": "",
        "options": "{}",
        "ident": "2",
        "out": "Channel_1",
        "stack": "0",
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a023e0fb0532eed0",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 1",
        "topic": "",
        "options": "{}",
        "ident": "3",
        "out": "Channel_1",
        "stack": "0",
        "x": 560,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "870e3c6e17ed4b66",
        "type": "inject",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "72a010dd17cda8ca"
            ]
        ]
    },
    {
        "id": "72a010dd17cda8ca",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "5a9d769754e13857",
        "name": "",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 140,
        "wires": [
            [
                "2d613545c4eb1749"
            ]
        ]
    },
    {
        "id": "8aaf18c166e10e8e",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 50;\nvar VoutMin = 20;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 60,
        "wires": [
            [
                "279553e0a148808b"
            ]
        ]
    },
    {
        "id": "279553e0a148808b",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "Ctrl.Loop2.setpoint",
        "func": "flow.set(\"Ctrl.Loop2.setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f3bfab5eb5fc60f4",
        "type": "inject",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.250",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint_T02",
        "payloadType": "flow",
        "x": 810,
        "y": 100,
        "wires": [
            [
                "0889a5d057742734"
            ]
        ]
    },
    {
        "id": "0d3ddf76024eba13",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "select_setpoint_T02",
        "func": "flow.set(\"select_setpoint_T02\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0889a5d057742734",
        "type": "switch",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "8aaf18c166e10e8e"
            ],
            [
                "b75ab119ea021c80"
            ],
            [
                "45e0db94ad50b633"
            ]
        ]
    },
    {
        "id": "45e0db94ad50b633",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 20;\nvar VoutMax = 50;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef =0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 30;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 140,
        "wires": [
            [
                "279553e0a148808b"
            ]
        ]
    },
    {
        "id": "b75ab119ea021c80",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "Cosinus wave - Generator",
        "func": "//Cosine wave function calculation\n//Sine wave function calculation\nvar x = flow.get(\"My_arc002\") + ((Math.PI *2)/300); //300 points in the arc\nflow.set(\"My_arc002\", x)\nif (flow.get(\"My_arc002\") >= (Math.PI *2)) { flow.set(\"My_arc002\", 0.0) };\nvar CosGen = Math.cos(x);\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 50;\nvar VoutMin = 20;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((CosGen+1)/AngCoef) + VoutMin ;\n\n//flow Var Level Setpoint definition\nflow.set(\"CosinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc002\", 0.0); //Varies the number from 0 to Pi/2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 100,
        "wires": [
            [
                "279553e0a148808b"
            ]
        ]
    },
    {
        "id": "385abef0813e4f02",
        "type": "ui_text",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "group": "e95a32a49b5bce90",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 800,
        "y": 260,
        "wires": []
    },
    {
        "id": "9920a769c8f2668b",
        "type": "ui_dropdown",
        "z": "422c888f31fe8026",
        "g": "151e9218e1993d04",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "e95a32a49b5bce90",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Cosinus Setpoint",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "0d3ddf76024eba13"
            ]
        ]
    },
    {
        "id": "296d9e97ed87df48",
        "type": "ui_numeric",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "e95a32a49b5bce90",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": 1,
        "className": "",
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "ba713a7fb7069893"
            ]
        ]
    },
    {
        "id": "ba713a7fb7069893",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "Kp",
        "func": "flow.set(\"Kp_2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f121bb1c3d5965f9",
        "type": "ui_numeric",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "e95a32a49b5bce90",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1270,
        "y": 620,
        "wires": [
            [
                "ccf4d527ce3d5f76"
            ]
        ]
    },
    {
        "id": "ccf4d527ce3d5f76",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "Td",
        "func": "flow.set(\"Td_2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "0f96c4d52f0d63b7",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "Ti",
        "func": "flow.set(\"Ti_2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "a2b655bd7c057de7",
        "type": "ui_numeric",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "e95a32a49b5bce90",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 1270,
        "y": 680,
        "wires": [
            [
                "0f96c4d52f0d63b7"
            ]
        ]
    },
    {
        "id": "0d157b212890d1bb",
        "type": "ui_text",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "group": "e95a32a49b5bce90",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1330,
        "y": 500,
        "wires": []
    },
    {
        "id": "348c989f430d0971",
        "type": "ui_button",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.5",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 560,
        "wires": [
            [
                "296d9e97ed87df48"
            ]
        ]
    },
    {
        "id": "3b9b18e2519f9912",
        "type": "ui_button",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "f121bb1c3d5965f9"
            ]
        ]
    },
    {
        "id": "5e649e5398833f1e",
        "type": "ui_button",
        "z": "422c888f31fe8026",
        "g": "67204dff7ee1a7a4",
        "name": "",
        "group": "e95a32a49b5bce90",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "4",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "a2b655bd7c057de7"
            ]
        ]
    },
    {
        "id": "1b45e5f35fc6a29b",
        "type": "inject",
        "z": "422c888f31fe8026",
        "g": "fefc20d5608b40c1",
        "name": "Trigger [enable, SP, PV, kp, td, ti]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            },
            {
                "p": "setpoint",
                "v": "Ctrl.Loop2.setpoint",
                "vt": "flow"
            },
            {
                "p": "pv",
                "v": "PIT129",
                "vt": "global"
            },
            {
                "p": "kp",
                "v": "Kp_2",
                "vt": "flow"
            },
            {
                "p": "td",
                "v": "Td_2",
                "vt": "flow"
            },
            {
                "p": "ti",
                "v": "Ti_2",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "976a1c996c646fe2"
            ]
        ]
    },
    {
        "id": "6dabbfd4c0342c1a",
        "type": "function",
        "z": "422c888f31fe8026",
        "g": "15ccf8968e997bbd",
        "name": "pv",
        "func": "var local_pv = flow.get(\"Ctrl.Loop2.pv\");\nmsg.payload = local_pv;\nmsg.topic = \"Process variable\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 640,
        "wires": [
            [
                "5a936e660138cbf1"
            ]
        ]
    },
    {
        "id": "9ff5b24ce9324aec",
        "type": "debug",
        "z": "10bc255372c174fe",
        "g": "f95156c14d9fd0e1",
        "name": "Out visualization",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 440,
        "wires": []
    },
    {
        "id": "e15bcacf4bbeb12c",
        "type": "HistoricalRegister",
        "z": "10bc255372c174fe",
        "g": "f95156c14d9fd0e1",
        "logfilename": "Hist_20240119a",
        "enable": "1",
        "x": 1330,
        "y": 440,
        "wires": [
            [
                "9ff5b24ce9324aec"
            ]
        ]
    },
    {
        "id": "2bbcdab61c5ddb39",
        "type": "ui_button",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "04080e4ace2a22c0",
                "37ca534490248375",
                "618a2391bc7850e5"
            ]
        ]
    },
    {
        "id": "88b9a0017edd13f8",
        "type": "ui_button",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "04080e4ace2a22c0",
                "37ca534490248375",
                "618a2391bc7850e5"
            ]
        ]
    },
    {
        "id": "c97c70bca064ac1c",
        "type": "ui_switch",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 510,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "37ca534490248375",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "Flow Eneable",
        "func": "   if(global.get(\"M2\") == 1 || global.get(\"M1\") == 1){\n      flow.set(\"Eneable\",0) \n      msg.payload = \"desativado por outra malha\"\n      return msg;\n   }\n   else{\n      if  (msg.payload === true) {\n         flow.set(\"Eneable\", 1)\n         global.set(\"M3\", 1)\n         msg.payload = \"acionado\"\n         return msg;\n\n      } else {\n         flow.set(\"Eneable\", 0)\n         global.set(\"M3\", 0)\n         msg.payload = \"desativado\"\n         return msg;\n      }\n   }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "fd3c11a99cc90f63"
            ]
        ]
    },
    {
        "id": "ea1002a56fe85177",
        "type": "moleculer-PID4",
        "z": "10bc255372c174fe",
        "g": "c850a697d03044f5",
        "broker": "63ebd62b2640f3f7",
        "name": "Line_pressure_CTRL_Loop",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "2",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-33.pidplus",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "f4147c24df870db1"
            ],
            [
                "0d91e0e6898e6623"
            ]
        ]
    },
    {
        "id": "0d91e0e6898e6623",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "c850a697d03044f5",
        "name": "Extract inputs from PID4.0/data",
        "func": "//Extract and individualize input variables from PID4.0/data\nflow.set(\"Ctrl.Loop3.proportionalConstant\", msg.payload.kp);\nflow.set(\"Ctrl.Loop3.integrative\", msg.payload.ti);\nflow.set(\"Ctrl.Loop3.derivative\", msg.payload.td);\nflow.set(\"Ctrl.Loop3.mv\", msg.payload.manipulatedVariable);\nflow.set(\"Ctrl.Loop3.error\", msg.payload.error);\nflow.set(\"setpoint3\", msg.payload.setpoint);\nflow.set(\"Ctrl.Loop3.pv\", msg.payload.pv);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "607d1d755c2afc3d",
        "type": "ui_chart",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "",
        "group": "718989759ca7cebb",
        "order": 1,
        "width": 20,
        "height": 7,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#00ff4c",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6d8860ceae8ea381",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.proportionalConstant",
        "func": "var local_proportionalConstant = flow.get(\"Ctrl.Loop3.proportionalConstant\");\nmsg.payload = local_proportionalConstant;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 520,
        "wires": [
            [
                "8cf35ebf79b24886"
            ]
        ]
    },
    {
        "id": "8320ada1c6d153f1",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.derivativeTimeInMs",
        "func": "var local_derivativeTimeInMs = flow.get(\"Ctrl.Loop3.derivative\");\nmsg.payload = local_derivativeTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "cfc01153883b0a9d"
            ]
        ]
    },
    {
        "id": "bd2a72ceccc2473e",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.resetTimeInMs",
        "func": "var local_resetTimeInMs = flow.get(\"Ctrl.Loop3.integrative\");\nmsg.payload = local_resetTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 560,
        "wires": [
            [
                "500b68774a2ab40c"
            ]
        ]
    },
    {
        "id": "cfc01153883b0a9d",
        "type": "ui_text",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "group": "0dd7e1bf0b208734",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "8cf35ebf79b24886",
        "type": "ui_text",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "group": "0dd7e1bf0b208734",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "500b68774a2ab40c",
        "type": "ui_text",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "group": "0dd7e1bf0b208734",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "b36d21c6ea0dc295",
        "type": "inject",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "8320ada1c6d153f1",
                "6d8860ceae8ea381",
                "bd2a72ceccc2473e",
                "d7b38d8c2cf4cbc6",
                "36133c2af199ee12",
                "18e99b3215ab2525",
                "6ba588fbcedc2eba",
                "ac4a743973cc0ca3"
            ]
        ]
    },
    {
        "id": "d7b38d8c2cf4cbc6",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.PIT118",
        "func": "var local_PIT129 = global.get(\"PIT118\");\nmsg.payload = local_PIT129;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 440,
        "wires": [
            [
                "6aea68b5e085a078"
            ]
        ]
    },
    {
        "id": "6aea68b5e085a078",
        "type": "ui_gauge",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 1,
        "width": 11,
        "height": 6,
        "gtype": "compass",
        "title": "Line pressure",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 440,
        "wires": []
    },
    {
        "id": "36133c2af199ee12",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.manipulated variable",
        "func": "var local_mv = flow.get(\"Ctrl.Loop3.mv\");\nmsg.payload = local_mv;\nmsg.topic = \"Manipulate variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 600,
        "wires": [
            [
                "51b9bad1547ca255"
            ]
        ]
    },
    {
        "id": "51b9bad1547ca255",
        "type": "ui_chart",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "",
        "group": "718989759ca7cebb",
        "order": 2,
        "width": 20,
        "height": 6,
        "label": "Manipulated variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#fbff00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "18e99b3215ab2525",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.Set Point",
        "func": "var local_SetPoint = flow.get(\"setpoint3\");\nmsg.payload = local_SetPoint;\nmsg.topic = \"Set Point\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            [
                "607d1d755c2afc3d"
            ]
        ]
    },
    {
        "id": "6ba588fbcedc2eba",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "GET.Error",
        "func": "var local_mv = flow.get(\"Ctrl.Loop3.error\");\nmsg.payload = local_mv;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 640,
        "wires": [
            [
                "51b9bad1547ca255"
            ]
        ]
    },
    {
        "id": "93ce3accdec50b30",
        "type": "inject",
        "z": "10bc255372c174fe",
        "g": "f95156c14d9fd0e1",
        "name": "Values to history",
        "props": [
            {
                "p": "Var001",
                "v": "PIT118",
                "vt": "global"
            },
            {
                "p": "Var002",
                "v": "SinusSetpoint",
                "vt": "global"
            },
            {
                "p": "Var003",
                "v": "Ctrl.Loop3.mv",
                "vt": "global"
            },
            {
                "p": "Var004",
                "v": "Ctrl.Loop3.error",
                "vt": "global"
            }
        ],
        "repeat": "1.0",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 1110,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "04080e4ace2a22c0",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === false) {\n        msg.enable = 1;\n    } else {\n        msg.enable = 0;\n    }\n    \n    msg.mv = 0;\n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "9a237cc8caf23b60"
            ]
        ]
    },
    {
        "id": "f4147c24df870db1",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "10bc255372c174fe",
        "g": "c850a697d03044f5",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "4",
        "out": "Channel_2",
        "stack": "0",
        "x": 580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9a237cc8caf23b60",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "5",
        "out": "Channel_2",
        "stack": "0",
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fd3c11a99cc90f63",
        "type": "debug",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "Line pressure",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "48b3836d25339e70",
        "type": "inject",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "8d47396a75617935"
            ]
        ]
    },
    {
        "id": "8d47396a75617935",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "c97c70bca064ac1c"
            ]
        ]
    },
    {
        "id": "4257869adbef2f13",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 15;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "111ae5b249d80bc0"
            ]
        ]
    },
    {
        "id": "111ae5b249d80bc0",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "Ctrl.Loop3.setpoint",
        "func": "flow.set(\"Ctrl.Loop3.setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "509fbd73e7d030db",
        "type": "inject",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint_03",
        "payloadType": "flow",
        "x": 890,
        "y": 160,
        "wires": [
            [
                "18239fa5a18a8616"
            ]
        ]
    },
    {
        "id": "eb638032a5a1bcdc",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "select_setpoint_Line_pressure",
        "func": "flow.set(\"select_setpoint_03\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "18239fa5a18a8616",
        "type": "switch",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1110,
        "y": 160,
        "wires": [
            [
                "4257869adbef2f13"
            ],
            [
                "37b7f6bde640df4d"
            ],
            [
                "32e9358ed2677798"
            ]
        ]
    },
    {
        "id": "32e9358ed2677798",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 10;\nvar VoutMax = 55;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef = 0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 10;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 220,
        "wires": [
            [
                "111ae5b249d80bc0"
            ]
        ]
    },
    {
        "id": "37b7f6bde640df4d",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "Cosinus wave - Generator",
        "func": "//Cosine wave function calculation\n//Sine wave function calculation\nvar x = flow.get(\"My_arc002\") + ((Math.PI *2)/300); //300 points in the arc\nflow.set(\"My_arc002\", x)\nif (flow.get(\"My_arc002\") >= (Math.PI *2)) { flow.set(\"My_arc002\", 0.0) };\nvar CosGen = Math.cos(x);\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 55;\nvar VoutMin = 10;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((CosGen+1)/AngCoef) + VoutMin ;\n\n//flow Var Level Setpoint definition\nflow.set(\"CosinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc002\", 0.0); //Varies the number from 0 to Pi/2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 180,
        "wires": [
            [
                "111ae5b249d80bc0"
            ]
        ]
    },
    {
        "id": "11dce03a3771b8a9",
        "type": "ui_text",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "group": "0dd7e1bf0b208734",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 300,
        "wires": []
    },
    {
        "id": "058c7748604ded67",
        "type": "ui_dropdown",
        "z": "10bc255372c174fe",
        "g": "856ed79b595ad76e",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "0dd7e1bf0b208734",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Cosinus Setpoint",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 860,
        "y": 340,
        "wires": [
            [
                "eb638032a5a1bcdc"
            ]
        ]
    },
    {
        "id": "a8557186b240bdc2",
        "type": "ui_numeric",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1250,
        "y": 580,
        "wires": [
            [
                "ad6e904dadae82ba"
            ]
        ]
    },
    {
        "id": "ad6e904dadae82ba",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "Kp",
        "func": "flow.set(\"Kp_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a23fc135400d961c",
        "type": "ui_numeric",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1250,
        "y": 640,
        "wires": [
            [
                "79000c1cfae9db27"
            ]
        ]
    },
    {
        "id": "79000c1cfae9db27",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "Td",
        "func": "flow.set(\"Td_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "07ed8bdf1b73194d",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "Ti",
        "func": "flow.set(\"Ti_3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "bd0430397b620ac2",
        "type": "ui_numeric",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "0dd7e1bf0b208734",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 1250,
        "y": 700,
        "wires": [
            [
                "07ed8bdf1b73194d"
            ]
        ]
    },
    {
        "id": "50dadbc6e84bfa5f",
        "type": "ui_text",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "group": "0dd7e1bf0b208734",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1330,
        "y": 540,
        "wires": []
    },
    {
        "id": "5a15d1ed5f06aedf",
        "type": "ui_button",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.2",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "a8557186b240bdc2"
            ]
        ]
    },
    {
        "id": "1ad7377343eb6a61",
        "type": "ui_button",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 640,
        "wires": [
            [
                "a23fc135400d961c"
            ]
        ]
    },
    {
        "id": "5f8105e2f8c01d18",
        "type": "ui_button",
        "z": "10bc255372c174fe",
        "g": "d955a8b8686ce038",
        "name": "",
        "group": "0dd7e1bf0b208734",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.5",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1070,
        "y": 700,
        "wires": [
            [
                "bd0430397b620ac2"
            ]
        ]
    },
    {
        "id": "9beb65244ff2e3fb",
        "type": "inject",
        "z": "10bc255372c174fe",
        "g": "c850a697d03044f5",
        "name": "Trigger [enable, SP, PV, kp, td, ti]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            },
            {
                "p": "setpoint",
                "v": "Ctrl.Loop3.setpoint",
                "vt": "flow"
            },
            {
                "p": "pv",
                "v": "PIT118",
                "vt": "global"
            },
            {
                "p": "kp",
                "v": "Kp_3",
                "vt": "flow"
            },
            {
                "p": "td",
                "v": "Td_3",
                "vt": "flow"
            },
            {
                "p": "ti",
                "v": "Ti_3",
                "vt": "flow"
            }
        ],
        "repeat": "0.25",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "ea1002a56fe85177"
            ]
        ]
    },
    {
        "id": "e49acc0badf9e7ba",
        "type": "comment",
        "z": "10bc255372c174fe",
        "name": "configuracao de valvulas",
        "info": "valvula controlada em 30\ne valvula mecanica em zero",
        "x": 870,
        "y": 40,
        "wires": []
    },
    {
        "id": "618a2391bc7850e5",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "name": "Enable electro valve",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === true) {\n        msg.enable = 1;\n        msg.mv = 30;\n    } else {\n        msg.enable = 0;\n        msg.mv = 100;\n    }\n    \n   \n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 60,
        "wires": [
            [
                "294e7b76b46c7e5b"
            ]
        ]
    },
    {
        "id": "294e7b76b46c7e5b",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "10bc255372c174fe",
        "g": "e066d64fac8bc17e",
        "broker": "63ebd62b2640f3f7",
        "name": "Electro valve",
        "topic": "",
        "options": "{}",
        "ident": "5",
        "out": "Channel_3",
        "stack": "0",
        "x": 610,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ac4a743973cc0ca3",
        "type": "function",
        "z": "10bc255372c174fe",
        "g": "9ad99076c086ca8d",
        "name": "pv",
        "func": "var local_pv = flow.get(\"Ctrl.Loop3.pv\");\nmsg.payload = local_pv;\nmsg.topic = \"Process variable\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 680,
        "wires": [
            [
                "607d1d755c2afc3d"
            ]
        ]
    },
    {
        "id": "dd84266fbb2920c1",
        "type": "debug",
        "z": "ac38cb94983d0eb8",
        "g": "c82b8b4cad8b8fa8",
        "name": "Out visualization",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 460,
        "wires": []
    },
    {
        "id": "e32fd3a82bca2efa",
        "type": "HistoricalRegister",
        "z": "ac38cb94983d0eb8",
        "g": "c82b8b4cad8b8fa8",
        "logfilename": "Hist_20240119a",
        "enable": "1",
        "x": 1370,
        "y": 460,
        "wires": [
            [
                "dd84266fbb2920c1"
            ]
        ]
    },
    {
        "id": "d78c5d6a493fe4be",
        "type": "ui_button",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 15,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "ON",
        "tooltip": "",
        "color": "",
        "bgcolor": "green",
        "className": "Button_ON",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "857ed0c2326fff8a",
                "bc4ee4c0f4e3e7ee",
                "d09248b1e9b1ec52"
            ]
        ]
    },
    {
        "id": "80146d4370644dd4",
        "type": "ui_button",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "OFF",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "Button_OFF",
        "icon": "",
        "payload": "false",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "bc4ee4c0f4e3e7ee",
                "857ed0c2326fff8a",
                "d09248b1e9b1ec52"
            ]
        ]
    },
    {
        "id": "b505175bbbfbfe84",
        "type": "ui_switch",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "60f50f7f44315fd8",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "send",
        "oncolor": "green",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "red",
        "animate": false,
        "className": "switch",
        "x": 510,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bc4ee4c0f4e3e7ee",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "Flow Eneable",
        "func": "   if(global.get(\"M1\") == 1 || global.get(\"M3\") == 1){\n      flow.set(\"Eneable\",0) \n      msg.payload = \"desativado por outra malha\"\n      return msg;\n   }\n   else{\nif (msg.payload === true) {\n   flow.set(\"Eneable\",1)\n   global.set(\"M2\", 1)\n   msg.payload = \"acionado\"\n   return msg;\n\n}else{\n   flow.set(\"Eneable\",0)\n   global.set(\"M2\", 0)\n   msg.payload = \"desativado\" \n   return msg;\n}\n   }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "7e2948f99b298252"
            ]
        ]
    },
    {
        "id": "a5b1e37a7ec5cd3b",
        "type": "moleculer-PID4",
        "z": "ac38cb94983d0eb8",
        "g": "73ee18af5c1bf4eb",
        "broker": "63ebd62b2640f3f7",
        "name": "Flow_rate_CTRL_Loop",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "3",
        "pv": "",
        "setpoint": "",
        "loopControl": "control-mesh-34.pidplus",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "34fddc388fef54d6"
            ],
            [
                "ca246f44b230227a"
            ]
        ]
    },
    {
        "id": "ca246f44b230227a",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "73ee18af5c1bf4eb",
        "name": "Extract inputs from PID4.0/data",
        "func": "//Extract and individualize input variables from PID4.0/data\nflow.set(\"Ctrl.Loop4.proportionalConstant\", msg.payload.kp);\nflow.set(\"Ctrl.Loop4.integrative\", msg.payload.ti);\nflow.set(\"Ctrl.Loop4.derivative\", msg.payload.td);\nflow.set(\"Ctrl.Loop4.mv\", msg.payload.manipulatedVariable);\nflow.set(\"Ctrl.Loop4.error\", msg.payload.error);\nflow.set(\"setpoint4\", msg.payload.setpoint);\nflow.set(\"Ctrl.Loop4.pv\", msg.payload.pv);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b4c9aa02b60591e6",
        "type": "ui_chart",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "",
        "group": "7b042bd4025be431",
        "order": 1,
        "width": 20,
        "height": 7,
        "label": "SetPoint x Process variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "30",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#46e302",
            "#00d5ff",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "99720bb9f8b0d32a",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.proportionalConstant",
        "func": "var local_proportionalConstant = flow.get(\"Ctrl.Loop4.proportionalConstant\");\nmsg.payload = local_proportionalConstant;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            [
                "81f0838e29beeb1e"
            ]
        ]
    },
    {
        "id": "295e2a790b597726",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.derivativeTimeInMs",
        "func": "var local_derivativeTimeInMs = flow.get(\"Ctrl.Loop4.derivative\");\nmsg.payload = local_derivativeTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "582660ad796819c9"
            ]
        ]
    },
    {
        "id": "749e42f5d8e2002f",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.resetTimeInMs",
        "func": "var local_resetTimeInMs = flow.get(\"Ctrl.Loop4.integrative\");\nmsg.payload = local_resetTimeInMs;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 580,
        "wires": [
            [
                "4cdc3660af00aa81"
            ]
        ]
    },
    {
        "id": "582660ad796819c9",
        "type": "ui_text",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "group": "60f50f7f44315fd8",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Td",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Times New Roman,Times,serif",
        "fontSize": "20",
        "color": "#469daf",
        "x": 770,
        "y": 500,
        "wires": []
    },
    {
        "id": "81f0838e29beeb1e",
        "type": "ui_text",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "group": "60f50f7f44315fd8",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "kp",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 770,
        "y": 540,
        "wires": []
    },
    {
        "id": "4cdc3660af00aa81",
        "type": "ui_text",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "group": "60f50f7f44315fd8",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Ti",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "20",
        "color": "#469daf",
        "x": 770,
        "y": 580,
        "wires": []
    },
    {
        "id": "32e447140bcaf106",
        "type": "inject",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "One second cyclical request",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 580,
        "wires": [
            [
                "295e2a790b597726",
                "99720bb9f8b0d32a",
                "749e42f5d8e2002f",
                "3f63f848c1ce2096",
                "ac93421fb2307efa",
                "b93b02676ac9149d",
                "cbecf6d96c5860b6",
                "4e901b4fa2797696"
            ]
        ]
    },
    {
        "id": "3f63f848c1ce2096",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.FIT116",
        "func": "var local_PIT129 = global.get(\"FIT116\");\nmsg.payload = local_PIT129;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 460,
        "wires": [
            [
                "ceca18fa0506c219"
            ]
        ]
    },
    {
        "id": "ceca18fa0506c219",
        "type": "ui_gauge",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 1,
        "width": 11,
        "height": 6,
        "gtype": "compass",
        "title": "Flow rate",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 460,
        "wires": []
    },
    {
        "id": "ac93421fb2307efa",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.manipulated variable",
        "func": "var local_mv = flow.get(\"Ctrl.Loop4.mv\");\nmsg.payload = local_mv;\nmsg.topic = \"Manipulate variable\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 620,
        "wires": [
            [
                "ff5b4f480fdaa3c2"
            ]
        ]
    },
    {
        "id": "ff5b4f480fdaa3c2",
        "type": "ui_chart",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "",
        "group": "7b042bd4025be431",
        "order": 2,
        "width": 20,
        "height": 6,
        "label": "Manipulated variable",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-20",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ffea00",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b93b02676ac9149d",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.Set Point",
        "func": "var local_SetPoint = flow.get(\"setpoint4\");\nmsg.payload = local_SetPoint;\nmsg.topic = \"Set Point\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "b4c9aa02b60591e6"
            ]
        ]
    },
    {
        "id": "cbecf6d96c5860b6",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "GET.Error",
        "func": "var local_mv = flow.get(\"Ctrl.Loop4.error\");\nmsg.payload = local_mv;\nmsg.topic = \"Error\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 660,
        "wires": [
            [
                "ff5b4f480fdaa3c2"
            ]
        ]
    },
    {
        "id": "3991c9301da622af",
        "type": "inject",
        "z": "ac38cb94983d0eb8",
        "g": "c82b8b4cad8b8fa8",
        "name": "Values to history",
        "props": [
            {
                "p": "Var001",
                "v": "FIT116",
                "vt": "global"
            },
            {
                "p": "Var002",
                "v": "SinusSetpoint",
                "vt": "global"
            },
            {
                "p": "Var003",
                "v": "Ctrl.Loop4.mv",
                "vt": "global"
            },
            {
                "p": "Var004",
                "v": "Ctrl.Loop4.error",
                "vt": "global"
            }
        ],
        "repeat": "1.0",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 1130,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "857ed0c2326fff8a",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "Enable OFF",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === false) {\n        msg.enable = 1;\n    } else {\n        msg.enable = 0;\n    }\n    \n    msg.mv = 0;\n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "f990a852b477f7f0"
            ]
        ]
    },
    {
        "id": "34fddc388fef54d6",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "ac38cb94983d0eb8",
        "g": "73ee18af5c1bf4eb",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "6",
        "out": "Channel_2",
        "stack": "0",
        "x": 560,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f990a852b477f7f0",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "broker": "63ebd62b2640f3f7",
        "name": "Pump 2",
        "topic": "",
        "options": "{}",
        "ident": "7",
        "out": "Channel_2",
        "stack": "0",
        "x": 600,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7f42450e37d94cab",
        "type": "inject",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "Trigger [enable]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "ba1b3a9485670bfe"
            ]
        ]
    },
    {
        "id": "ba1b3a9485670bfe",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "",
        "func": " if(msg.enable == 1){\n   msg.payload = true\n   return msg;\n }else{\n    msg.payload = false\n    return msg;\n }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "b505175bbbfbfe84"
            ]
        ]
    },
    {
        "id": "7e2948f99b298252",
        "type": "debug",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "Flow rate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mv",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "51f1d3e368357b1c",
        "type": "ui_dropdown",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select Setpoint",
        "group": "60f50f7f44315fd8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sinus Setpoint",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Cosinus Setpoint",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Triangle Setpoint",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 860,
        "y": 360,
        "wires": [
            [
                "e60b39fd1f5031f1"
            ]
        ]
    },
    {
        "id": "52d7ff420ee3667b",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "Sinus wave - Generator",
        "func": "//Sine wave function calculation\nvar x = flow.get(\"My_arc001\") + ((Math.PI * 2)/300); // ===300 points (seconds) in the arc\nflow.set(\"My_arc001\", x)\nvar SinGen = Math.sin(x);  // === It varies from +1 to -1\nif (flow.get(\"My_arc001\") >= (Math.PI * 2)) { flow.set(\"My_arc001\", 0.0) };\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 30;\nvar VoutMin = 10;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((SinGen+1)/AngCoef) + VoutMin ;\n\n//var Vout = SinGen;\n\n//flow Var Level Setpoint definition\nflow.set(\"SinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc001\", 0.0); //Varies the number from 0 to Pi*2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "b4f977b9eef2b7ba"
            ]
        ]
    },
    {
        "id": "b4f977b9eef2b7ba",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "Ctrl.Loop4.setpoint",
        "func": "flow.set(\"Ctrl.Loop4.setpoint\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "092683835ca30e55",
        "type": "inject",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "select_setpoint_04",
        "payloadType": "flow",
        "x": 890,
        "y": 160,
        "wires": [
            [
                "04c4ee1364ea7655"
            ]
        ]
    },
    {
        "id": "e60b39fd1f5031f1",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "select_setpoint_flow_rate",
        "func": "flow.set(\"select_setpoint_04\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "04c4ee1364ea7655",
        "type": "switch",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1110,
        "y": 160,
        "wires": [
            [
                "52d7ff420ee3667b"
            ],
            [
                "f03675743a929cd9"
            ],
            [
                "46ceabb350113ccc"
            ]
        ]
    },
    {
        "id": "46ceabb350113ccc",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "Triangle wave - Generator   .",
        "func": "//Triangle wave function calculation\nvar VoutMin = 10;\nvar VoutMax = 30;\n// coef > 1, wave more steep\n// coef = 1, wave in 45 degrees\n// coef < 1, wave less steep\nvar coef =0.20\nvar Vout = flow.get(\"tri\") + (flow.get(\"signal\")* coef);\nflow.set(\"tri\", Vout);\n\n//Definition if it count up or counts down\nif (Vout <= VoutMin) { flow.set(\"signal\", 1);}\n                else { ; }\nif (Vout >= VoutMax) { flow.set(\"signal\",-1);}\n                else { ; }              \n\nflow.set(\"TriangleSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\nvar VoutMin = 30;\nflow.set(\"tri\",VoutMin);\nflow.set(\"signal\", 1);",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 200,
        "wires": [
            [
                "b4f977b9eef2b7ba"
            ]
        ]
    },
    {
        "id": "f03675743a929cd9",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "name": "Cosinus wave - Generator",
        "func": "//Cosine wave function calculation\n//Sine wave function calculation\nvar x = flow.get(\"My_arc002\") + ((Math.PI *2)/300); //300 points in the arc\nflow.set(\"My_arc002\", x)\nif (flow.get(\"My_arc002\") >= (Math.PI *2)) { flow.set(\"My_arc002\", 0.0) };\nvar CosGen = Math.cos(x);\n\n//Scaling [ Y-Y0 = m.(X-X0) ]\nvar VoutMax = 30;\nvar VoutMin = 10;\nvar AngCoef = 2 / (VoutMax - VoutMin);\nvar Vout = ((CosGen+1)/AngCoef) + VoutMin ;\n\n//flow Var Level Setpoint definition\nflow.set(\"CosinusSetpoint\", Vout);\nmsg.payload = Vout;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "//O código adicionado aqui será executado uma vez\n// sempre que o nó for iniciado.\n\nflow.set(\"My_arc002\", 0.0); //Varies the number from 0 to Pi/2 (in rad mode)",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "b4f977b9eef2b7ba"
            ]
        ]
    },
    {
        "id": "158d7f3a6d632ae6",
        "type": "ui_text",
        "z": "ac38cb94983d0eb8",
        "g": "b253d6814e713044",
        "group": "60f50f7f44315fd8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "01d30cb3f70c26b1",
        "type": "ui_numeric",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "label": "Kp",
        "tooltip": "",
        "group": "60f50f7f44315fd8",
        "order": 6,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1310,
        "y": 600,
        "wires": [
            [
                "d85b4fc5440e7d45"
            ]
        ]
    },
    {
        "id": "d85b4fc5440e7d45",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "Kp",
        "func": "flow.set(\"kp_4\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b0aef8b8aec69db9",
        "type": "ui_numeric",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "label": "Td",
        "tooltip": "",
        "group": "60f50f7f44315fd8",
        "order": 9,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 1310,
        "y": 660,
        "wires": [
            [
                "0773f40110d5affd"
            ]
        ]
    },
    {
        "id": "0773f40110d5affd",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "Td",
        "func": "flow.set(\"Td_4\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6dfd74a3fcf7e5ed",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "Ti",
        "func": "flow.set(\"Ti_4\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4ab82418ac6e4df1",
        "type": "ui_numeric",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "label": "Ti",
        "tooltip": "",
        "group": "60f50f7f44315fd8",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "0.1",
        "className": "",
        "x": 1310,
        "y": 720,
        "wires": [
            [
                "6dfd74a3fcf7e5ed"
            ]
        ]
    },
    {
        "id": "3aa0dc7eb3b84136",
        "type": "ui_text",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "group": "60f50f7f44315fd8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Select Pid 4.0 Paramas",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1370,
        "y": 560,
        "wires": []
    },
    {
        "id": "1188e6836e8c9984",
        "type": "ui_button",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Kp Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.2",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "01d30cb3f70c26b1"
            ]
        ]
    },
    {
        "id": "e3e9b9cdeb6f948f",
        "type": "ui_button",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Td Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "b0aef8b8aec69db9"
            ]
        ]
    },
    {
        "id": "c94b72caf79c0faf",
        "type": "ui_button",
        "z": "ac38cb94983d0eb8",
        "g": "fbc3496b9b5d615d",
        "name": "",
        "group": "60f50f7f44315fd8",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Ti Standart",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1.5",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 1090,
        "y": 720,
        "wires": [
            [
                "4ab82418ac6e4df1"
            ]
        ]
    },
    {
        "id": "e072665c22766896",
        "type": "inject",
        "z": "ac38cb94983d0eb8",
        "g": "73ee18af5c1bf4eb",
        "name": "Trigger [enable, SP, PV, kp, td, ti]",
        "props": [
            {
                "p": "enable",
                "v": "Eneable",
                "vt": "flow"
            },
            {
                "p": "setpoint",
                "v": "Ctrl.Loop4.setpoint",
                "vt": "flow"
            },
            {
                "p": "pv",
                "v": "FIT116",
                "vt": "global"
            },
            {
                "p": "kp",
                "v": "kp_4",
                "vt": "flow"
            },
            {
                "p": "td",
                "v": "Td_4",
                "vt": "flow"
            },
            {
                "p": "ti",
                "v": "Ti_4",
                "vt": "flow"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "a5b1e37a7ec5cd3b"
            ]
        ]
    },
    {
        "id": "9903ba22ef95296a",
        "type": "comment",
        "z": "ac38cb94983d0eb8",
        "name": "Configuracao de valvulas",
        "info": "valvula controlada em 70\nvalvula manual da frente em 0\nValvula manual de baixo em 100\n\n0 = fechado\n100 = aberto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "d09248b1e9b1ec52",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "name": "Enable electro valve",
        "func": "for (let i = 0; i < 3; i++) {\n    if (msg.payload === true) {\n        msg.enable = 1;\n        msg.mv = 70;\n    } else {\n        msg.enable = 0;\n        msg.mv = 100;\n    }\n    \n   \n    node.send(msg); // Envie a mensagem no final de cada iteração\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "c8fe68f506c11690"
            ]
        ]
    },
    {
        "id": "c8fe68f506c11690",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "ac38cb94983d0eb8",
        "g": "dd4409398f1f0774",
        "broker": "63ebd62b2640f3f7",
        "name": "Electro valve",
        "topic": "",
        "options": "{}",
        "ident": "5",
        "out": "Channel_3",
        "stack": "0",
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4e901b4fa2797696",
        "type": "function",
        "z": "ac38cb94983d0eb8",
        "g": "1eb1e7c78e7578db",
        "name": "pv",
        "func": "var local_pv = flow.get(\"Ctrl.Loop4.pv\");\nmsg.payload = local_pv;\nmsg.topic = \"Process variable\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 700,
        "wires": [
            [
                "b4c9aa02b60591e6"
            ]
        ]
    },
    {
        "id": "358796e94df32580",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "3fca2565cc860254",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "getInputVoltage",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "0663918219373ac8"
            ]
        ]
    },
    {
        "id": "cf17ac967c531917",
        "type": "moleculer-PID4",
        "z": "58f44066c4db29a2",
        "g": "54e8e335bfbdd905",
        "broker": "53d52b40311b0dfb",
        "name": "",
        "topic": "",
        "options": "{}",
        "spdyn": "{}",
        "ident": "4",
        "setpoint": 50,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "ebfeef4405ef0008"
            ],
            [
                "f6c42dd644723f49"
            ]
        ]
    },
    {
        "id": "85dadcd839250c41",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "54e8e335bfbdd905",
        "name": "",
        "props": [
            {
                "p": "setpoint",
                "v": "CtrlLoop1Setpoint",
                "vt": "global"
            },
            {
                "p": "pv",
                "v": "GlobalPv",
                "vt": "global"
            },
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "cf17ac967c531917"
            ]
        ]
    },
    {
        "id": "ebfeef4405ef0008",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "54e8e335bfbdd905",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mv",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 280,
        "wires": []
    },
    {
        "id": "f6c42dd644723f49",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "54e8e335bfbdd905",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "5f0e5a20cdd4a8f4",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "SetOutPutVoltage",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "mv",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "bfc077c58635b4d9"
            ]
        ]
    },
    {
        "id": "9a3e09b8c3655bf7",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "c91efd0b61605248",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "getInputCurrent",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "e124d9f9428c74ef"
            ]
        ]
    },
    {
        "id": "76975452a297d4db",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "f63cdce30a770f8e",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "SetOutPutCurrent",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "mv",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "32f4686259b5c5ca"
            ]
        ]
    },
    {
        "id": "84255527243cc7a7",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 340,
        "wires": []
    },
    {
        "id": "fb52fd37d9173d7f",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "getOutPutCurrent",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 780,
        "y": 60,
        "wires": [
            [
                "b22cefdfa81fd51c"
            ]
        ]
    },
    {
        "id": "227b966451fa4b01",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 60,
        "wires": []
    },
    {
        "id": "5cfbeb41ce91e322",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "getOutPutVoltage",
        "props": [
            {
                "p": "enable",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "daca420975a766d1"
            ]
        ]
    },
    {
        "id": "e51ac46300818285",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 120,
        "wires": []
    },
    {
        "id": "18c9611e641c8b0c",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "3dd7cae5153aa739",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "name": "getInputOpto",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "2a32ba1e2f19c493"
            ]
        ]
    },
    {
        "id": "792a3185ca3f412d",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "SetOutPutOpenDrain",
        "props": [
            {
                "p": "enable",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "mv",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "9f8766569fdde968"
            ]
        ]
    },
    {
        "id": "15310384b5224faa",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 400,
        "wires": []
    },
    {
        "id": "41658f9b292ff741",
        "type": "debug",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 180,
        "wires": []
    },
    {
        "id": "b8056334af2e759c",
        "type": "inject",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "name": "getOutputOpenDrain",
        "props": [
            {
                "p": "enable",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "04b03f49cbd7c057"
            ]
        ]
    },
    {
        "id": "bfc077c58635b4d9",
        "type": "moleculer-DAQ_AO_U_WT",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": "8",
        "out": "Channel_3",
        "stack": "0",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "9a3e09b8c3655bf7"
            ]
        ]
    },
    {
        "id": "daca420975a766d1",
        "type": "moleculer-DAQ_AO_U_RD",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "channel_1",
        "stack": "0",
        "x": 990,
        "y": 120,
        "wires": [
            [
                "e51ac46300818285"
            ]
        ]
    },
    {
        "id": "b22cefdfa81fd51c",
        "type": "moleculer-DAQ_AO_I_RD",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "channel_1",
        "stack": "0",
        "x": 980,
        "y": 60,
        "wires": [
            [
                "227b966451fa4b01"
            ]
        ]
    },
    {
        "id": "e124d9f9428c74ef",
        "type": "moleculer-DAQ_AI_I",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "Channel_1",
        "stack": "0",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "76975452a297d4db"
            ]
        ]
    },
    {
        "id": "0663918219373ac8",
        "type": "moleculer-DAQ_AI_U",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "channel_3",
        "stack": "0",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "358796e94df32580"
            ]
        ]
    },
    {
        "id": "2a32ba1e2f19c493",
        "type": "moleculer-DAQ_DI_OPTO",
        "z": "58f44066c4db29a2",
        "g": "317de8e4868d033a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "channel_1",
        "stack": "0",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "18c9611e641c8b0c"
            ]
        ]
    },
    {
        "id": "04b03f49cbd7c057",
        "type": "moleculer-DAQ_AO_OD_RD",
        "z": "58f44066c4db29a2",
        "g": "be473d6f86f8f61a",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "pv": "channel_1",
        "stack": "0",
        "x": 990,
        "y": 180,
        "wires": [
            [
                "41658f9b292ff741"
            ]
        ]
    },
    {
        "id": "32f4686259b5c5ca",
        "type": "moleculer-DAQ_AO_I_WT",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "out": "channel_1",
        "stack": "0",
        "x": 360,
        "y": 340,
        "wires": [
            [
                "84255527243cc7a7"
            ]
        ]
    },
    {
        "id": "9f8766569fdde968",
        "type": "moleculer-DAQ_AO_OD_WT",
        "z": "58f44066c4db29a2",
        "g": "1203bf6fcb5525b0",
        "broker": "63ebd62b2640f3f7",
        "name": "",
        "topic": "",
        "options": "{}",
        "ident": 0,
        "out": "channel_3",
        "stack": "0",
        "x": 370,
        "y": 400,
        "wires": [
            [
                "15310384b5224faa"
            ]
        ]
    }
]